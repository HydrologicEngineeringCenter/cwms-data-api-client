openapi: 3.0.1
info:
  title: CWMS Data API
  description: CWMS REST API for Data Retrieval
  version: '3.0'
security:
  - MultipleAccessManager: []
paths:
  /cwms-data:
    get:
      summary: Get cwmsData
      operationId: getCwmsData
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /cwms-data/auth/keys/{key-name}:
    get:
      tags:
        - Authorization
      summary: Get cwmsData auth keys with keyName
      description: View specific key
      operationId: getCwmsDataAuthKeysWithKeyName
      parameters:
        - name: key-name
          in: path
          description: 'Name of the specific key to get more information for. NOTE: Case-sensitive.'
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    delete:
      tags:
        - Authorization
      summary: Delete cwmsData auth keys with keyName
      description: Delete API key for a user
      operationId: deleteCwmsDataAuthKeysWithKeyName
      parameters:
        - name: key-name
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/auth/keys:
    get:
      tags:
        - Authorization
      summary: Get cwmsData auth keys
      description: View all keys for the current user
      operationId: getCwmsDataAuthKeys
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    post:
      tags:
        - Authorization
      summary: Post cwmsData auth keys
      description: Create a new API Key for user. The randomly generated key is returned to the caller. A provided key will be ignored.
      operationId: postCwmsDataAuthKeys
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKey'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/location/category/{category-id}:
    get:
      tags:
        - Location Categories
      summary: Get cwmsData location category with categoryId
      description: Retrieves requested Location Category
      operationId: getCwmsDataLocationCategoryWithCategoryId
      parameters:
        - name: category-id
          in: path
          description: Specifies the Category whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the Location Category whose data is to be included in the response.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationCategory'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Location Categories
      summary: Delete cwmsData location category with categoryId
      description: Deletes requested location category
      operationId: deleteCwmsDataLocationCategoryWithCategoryId
      parameters:
        - name: category-id
          in: path
          description: The location category to be deleted
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the location category to be deleted
          required: true
          schema:
            type: string
        - name: cascade-delete
          in: query
          description: 'Specifies whether to delete any location groups in this location category. Default: false'
          schema:
            type: boolean
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/location/category:
    get:
      tags:
        - Location Categories
      summary: Get cwmsData location category
      description: Returns CWMS Location Category Data
      operationId: getCwmsDataLocationCategory
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the location category(ies) whose data is to be included in the response. If this field is not specified, matching location category information from all offices shall be returned.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationCategory'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Location Categories
      summary: Post cwmsData location category
      description: Create new LocationCategory
      operationId: postCwmsDataLocationCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationCategory'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/location/group/{group-id}:
    get:
      tags:
        - Location Groups
      summary: Get cwmsData location group with groupId
      description: Retrieves requested Location Group
      operationId: getCwmsDataLocationGroupWithGroupId
      parameters:
        - name: group-id
          in: path
          description: Specifies the location_group whose data is to be included in the response
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the location group whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: category-id
          in: query
          description: Specifies the category containing the location group whose data is to be included in the response.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationGroup'
            text/csv:
              schema:
                $ref: '#/components/schemas/CsvV1LocationGroup'
            application/geo+json:
              schema:
                $ref: '#/components/schemas/Unit'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Location Groups
      summary: Delete cwmsData location group with groupId
      description: Deletes requested location group
      operationId: deleteCwmsDataLocationGroupWithGroupId
      parameters:
        - name: group-id
          in: path
          description: The location group to be deleted
          required: true
          schema:
            type: string
        - name: category-id
          in: query
          description: Specifies the location category of the location group to be deleted
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the location group to be deleted
          required: true
          schema:
            type: string
        - name: cascade-delete
          in: query
          description: 'Specifies whether to specifies whether to unassign any location assignments. Default: false'
          schema:
            type: boolean
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Location Groups
      summary: Patch cwmsData location group with groupId
      description: Update existing LocationGroup
      operationId: patchCwmsDataLocationGroupWithGroupId
      parameters:
        - name: group-id
          in: path
          required: true
          schema:
            type: string
        - name: replace-assigned-locs
          in: query
          description: 'Specifies whether to unassign all existing locations before assigning new locations specified in the content body Default: false'
          schema:
            type: boolean
        - name: office
          in: query
          description: Specifies the owning office of the location group to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationGroup'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/location/group:
    get:
      tags:
        - Location Groups
      summary: Get cwmsData location group
      description: Returns CWMS Location Groups Data
      operationId: getCwmsDataLocationGroup
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the location group(s) whose data is to be included in the response. If this field is not specified, matching location groups information from all offices shall be returned.
          schema:
            type: string
        - name: include-assigned
          in: query
          description: 'Include the assigned locations in the returned location groups. (default: false)'
          schema:
            type: boolean
        - name: location-category-like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> matching against the location category id
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationGroup'
            text/csv:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CsvV1LocationGroup'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Location Groups
      summary: Post cwmsData location group
      description: Create new LocationGroup
      operationId: postCwmsDataLocationGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationGroup'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/locations/{location-id}:
    get:
      tags:
        - Locations
      summary: Get cwmsData locations with locationId
      description: Returns CWMS Location Data
      operationId: getCwmsDataLocationsWithLocationId
      parameters:
        - name: location-id
          in: path
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the location level(s) whose data is to be included in the response. If this field is not specified, matching location level information from all offices shall be returned.
          required: true
          schema:
            type: string
        - name: unit
          in: query
          description: |-
            Specifies the unit or unit system of the response. Valid values for the unit field are: 
            * `EN`  Specifies English unit system.  Location values will be in the default English units for their parameters.
            * `SI`  Specifies the SI unit system.  Location values will be in the default SI units for their parameters.
            * `Other`  Any unit returned in the response to the units URI request that is appropriate for the requested parameters.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/Location'
            application/xml;version=2:
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the location was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Locations
      summary: Delete cwmsData locations with locationId
      description: Delete CWMS Location
      operationId: deleteCwmsDataLocationsWithLocationId
      parameters:
        - name: location-id
          in: path
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the location whose data is to be deleted. If this field is not specified, matching location information will be deleted from all offices.
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the location was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Locations
      summary: Patch cwmsData locations with locationId
      description: Update CWMS Location
      operationId: patchCwmsDataLocationsWithLocationId
      parameters:
        - name: location-id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Location'
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the location was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/locations:
    get:
      tags:
        - Locations
      summary: Get cwmsData locations
      description: Returns CWMS Location Data.  The Catalog end-point is also capable of retrieving lists of locations and can filter on additional fields.
      operationId: getCwmsDataLocations
      parameters:
        - name: names
          in: query
          description: Specifies the name(s) of the location(s) whose data is to be included in the response.  When the `format` parameter is not provided and `application/json;version=2` is specified in the accept header, this parameter is a Posix <a href="regexp.html">regular expression</a> matching against the id
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the location level(s) whose data is to be included in the response. If this field is not specified, matching location level information from all offices shall be returned.
          schema:
            type: string
        - name: unit
          in: query
          description: |-
            Specifies the unit or unit system of the response. Valid values for the unit field are:
            * `EN`  Specifies English unit system.  Location level values will be in the default English units for their parameters.
            * `SI`  Specifies the SI unit system.  Location level values will be in the default SI units for their parameters.
            * `Other`  Any unit returned in the response to the units URI request that is appropriate for the requested parameters.
          schema:
            type: string
        - name: datum
          in: query
          description: |-
            Specifies the elevation datum of the response. This field affects only vertical datum. Valid values for this field are:
            * `NAVD88`  The elevation values will in the specified or default units above the NAVD-88 datum.
            * `NGVD29`  The elevation values will be in the specified or default units above the NGVD-29 datum.
          schema:
            type: string
        - name: format
          in: query
          description: |-
            Specifies the encoding format of the response. Valid values for the format field for this URI are:

            * `tab`
            * `csv`
            * `xml`
            * `wml2` (only if name field is specified)
            * `json` (default)

            * `geojson`
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
            text/tab-separated-values:
              schema:
                type: string
            text/csv:
              schema:
                type: string
            application/xml:
              schema:
                $ref: '#/components/schemas/Unit'
            application/vnd.opengis.waterml+xml:
              schema:
                $ref: '#/components/schemas/Unit'
            application/geo+json:
              schema:
                $ref: '#/components/schemas/Unit'
            '':
              schema:
                $ref: '#/components/schemas/Unit'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Locations
      summary: Post cwmsData locations
      description: Create new CWMS Location
      operationId: postCwmsDataLocations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
          application/xml:
            schema:
              $ref: '#/components/schemas/Location'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/states:
    get:
      tags:
        - States
      summary: Get cwmsData states
      operationId: getCwmsDataStates
      responses:
        '200':
          description: A list of states.
          content:
            application/json;version=2:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/State'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /cwms-data/counties:
    get:
      tags:
        - Counties
      summary: Get cwmsData counties
      operationId: getCwmsDataCounties
      responses:
        '200':
          description: A list of counties.
          content:
            application/json;version=2:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/County'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /cwms-data/offices/{office}:
    get:
      tags:
        - Offices
      summary: Get cwmsData offices with office
      operationId: getCwmsDataOfficesWithOffice
      parameters:
        - name: office
          in: path
          description: The 3 letter office ID you want more information for
          required: true
          schema:
            type: string
        - name: format
          in: query
          description: "(CWMS-Data-Format-Deprecated: 2024-11-01 in favor of Accept header) Specifies the encoding format of the response. Valid value for the format field for this URI are:\r\n* `tab`\r\n* `csv`\r\n* `xml`\r\n* `json` (default)"
          deprecated: true
          schema:
            type: string
      responses:
        '200':
          description: A list of offices.
          content:
            '':
              schema:
                $ref: '#/components/schemas/OfficeFormatV1'
            application/json:
              schema:
                $ref: '#/components/schemas/Office'
            application/json;version=1:
              schema:
                $ref: '#/components/schemas/OfficeFormatV1'
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/Office'
            application/xml:
              schema:
                $ref: '#/components/schemas/Office'
            application/xml;version=1:
              schema:
                $ref: '#/components/schemas/OfficeFormatV1'
            application/xml;version=2:
              schema:
                $ref: '#/components/schemas/Office'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /cwms-data/offices:
    get:
      tags:
        - Offices
      summary: Get cwmsData offices
      operationId: getCwmsDataOffices
      parameters:
        - name: format
          in: query
          description: "(CWMS-Data-Format-Deprecated: 2024-11-01 in favor of Accept header) Specifies the encoding format of the response. Valid value for the format field for this URI are:\r\n\n* `tab`\r\n\n* `csv`\r\n \n* `xml`\r\n\n* `json` (default)"
          deprecated: true
          schema:
            type: string
        - name: has-data
          in: query
          description: 'A flag (''True''/''False'') When set to true this returns offices that have operational data. Default value is <b>False</b>,. <a href="https://github.com/USACE/cwms-data-api/issues/321" target="_blank">Feature #321</a>'
          schema:
            type: boolean
      responses:
        '200':
          description: A list of offices.
          content:
            '':
              schema:
                $ref: '#/components/schemas/OfficeFormatV1'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Office'
            application/json;version=1:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OfficeFormatV1'
            application/json;version=2:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Office'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /cwms-data/units:
    get:
      tags:
        - Units
      summary: Get cwmsData units
      operationId: getCwmsDataUnits
      parameters:
        - name: format
          in: query
          description: |-
            Specifies the encoding format of the response. Valid value for the format field for this URI are:
            * `tab`
            * `csv`
            * `xml`
            * `json` (default)
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: The format requested is not implemented
      security: []
  /cwms-data/parameters:
    get:
      tags:
        - Parameters
      summary: Get cwmsData parameters
      operationId: getCwmsDataParameters
      parameters:
        - name: format
          in: query
          description: |-
            Specifies the encoding format of the response. Valid value for the format field for this URI are:
            * `tab`
            * `csv`
            * `xml`
            * `json` (default)
          deprecated: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the parameters whose data is to be included in the response. If this field is not specified, the session user's default office will be used.
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /cwms-data/timezones:
    get:
      tags:
        - TimeZones
      summary: Get cwmsData timezones
      operationId: getCwmsDataTimezones
      parameters:
        - name: format
          in: query
          description: |-
            Specifies the encoding format of the response. Valid value for the format field for this URI are:
            * `tab`  
            * `csv`  
            * `xml`  
            * `json`  (default)
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: The format requested is not implemented
      security: []
  /cwms-data/levels/{level-id}:
    get:
      tags:
        - Levels
      summary: Get cwmsData levels with levelId
      description: Retrieves requested Location Level
      operationId: getCwmsDataLevelsWithLevelId
      parameters:
        - name: level-id
          in: path
          description: Specifies the requested location level.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the office of the Location Level to be returned
          required: true
          schema:
            type: string
        - name: effective-date
          in: query
          description: Specifies the effective date of Location Level to be returned
          required: true
          schema:
            type: string
        - name: timezone
          in: query
          description: Specifies the time zone of the values of the effective date field (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
        - name: unit
          in: query
          description: Desired unit for the values retrieved.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/LocationLevel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Levels
      summary: Delete cwmsData levels with levelId
      description: Delete CWMS Location Level
      operationId: deleteCwmsDataLevelsWithLevelId
      parameters:
        - name: level-id
          in: path
          description: Specifies the location level id of the Location Level to be deleted
          required: true
          schema:
            type: string
        - name: cascade-delete
          in: query
          description: Specifies whether to cascade the delete.  Defaults to false.
          schema:
            type: boolean
        - name: office
          in: query
          description: Specifies the owning office of the location level whose data is to be deleted. If this field is not specified, matching location level information will be deleted from all offices.
          schema:
            type: string
        - name: effective-date
          in: query
          description: Specifies the effective date of the level to be deleted. If not provided will delete all data and reference to the location level.
          schema:
            type: string
        - name: timezone
          in: query
          description: Specifies the time zone of the value of the effective date field (unless otherwise specified).If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Levels
      summary: Patch cwmsData levels with levelId
      description: Update CWMS Location Level
      operationId: patchCwmsDataLevelsWithLevelId
      parameters:
        - name: level-id
          in: path
          description: Specifies the location level id of the Location Level to be updated
          required: true
          schema:
            type: string
        - name: effective-date
          in: query
          description: Specifies the effective date of Location Level that will be updated
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationLevel'
          application/xml:
            schema:
              $ref: '#/components/schemas/LocationLevel'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/levels:
    get:
      tags:
        - Levels
      summary: Get cwmsData levels
      operationId: getCwmsDataLevels
      parameters:
        - name: level-id-mask
          in: query
          description: Specifies the name(s) of the location level(s) whose data is to be included in the response. Uses * for all.
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the location level(s) whose data is to be included in the response. If this field is not specified, matching location level information from all offices shall be returned.
          schema:
            type: string
        - name: unit
          in: query
          description: |-
            Specifies the unit or unit system of the response. Valid values for the unit field are:
            * `EN`  Specifies English unit system.  Location level values will be in the default English units for their parameters.
            * `SI`  Specifies the SI unit system.  Location level values will be in the default SI units for their parameters.
            * `Other`  Any unit returned in the response to the units URI request that is appropriate for the requested parameters.
          schema:
            type: string
        - name: datum
          in: query
          description: |-
            Specifies the elevation datum of the response. This field affects only elevation location levels. Valid values for this field are:
            * `NAVD88`  The elevation values will in the specified or default units above the NAVD-88 datum.
            * `NGVD29`  The elevation values will be in the specified or default units above the NGVD-29 datum.
          schema:
            type: string
        - name: begin
          in: query
          description: Specifies the start of the time window for data to be included in the response. If this field is not specified, any required time window begins 24 hours prior to the specified or default end time.
          schema:
            type: string
        - name: end
          in: query
          description: Specifies the end of the time window for data to be included in the response. If this field is not specified, any required time window ends at the current time
          schema:
            type: string
        - name: timezone
          in: query
          description: Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
        - name: format
          in: query
          description: |-
            Specifies the encoding format of the response. Requests specifying an Accept header:application/json;version=2 must not include this field. Valid format field values for this URI are:
            * `tab`
            * `csv`
            * `xml`
            * `wml2` (only if name field is specified)
            * `json` (default)
          schema:
            type: string
        - name: page
          in: query
          description: This identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
          schema:
            type: string
        - name: page-size
          in: query
          description: How many entries per page returned. Default 100.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
            '':
              schema:
                $ref: '#/components/schemas/Unit'
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/LocationLevels'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Levels
      summary: Post cwmsData levels
      description: Create new CWMS Location Level
      operationId: postCwmsDataLevels
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationLevel'
          application/xml:
            schema:
              $ref: '#/components/schemas/LocationLevel'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/levels/{level-id}/timeseries:
    get:
      tags:
        - Levels
      summary: Get cwmsData levels with levelId timeseries
      description: Retrieves requested Location Level
      operationId: getCwmsDataLevelsWithLevelIdTimeseries
      parameters:
        - name: level-id
          in: path
          description: Specifies the requested location level.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the office of the Location Level to be returned
          required: true
          schema:
            type: string
        - name: interval
          in: query
          description: 'Interval time step for the returned time series. Pseudo-regular interval definitions will be treated like local regular. Irregular interval will generate daily time steps. Default: 0'
          schema:
            type: string
        - name: begin
          in: query
          description: Specifies the start of the time window for data to be included in the response. If this field is not specified, any required time window begins 24 hours prior to the specified or default end time. The format for this field is ISO 8601 extended, with optional offset and timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
          schema:
            type: string
        - name: end
          in: query
          description: Specifies the end of the time window for data to be included in the response. If this field is not specified, any required time window ends at the current time. The format for this field is ISO 8601 extended, with optional timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
          schema:
            type: string
        - name: timezone
          in: query
          description: "Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.\r\nIgnored if begin was specified with offset and timezone."
          schema:
            type: string
        - name: unit
          in: query
          description: Desired unit for the values retrieved.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A CWMS Time Series representation of the specified location level.
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/TimeSeries'
            application/xml;version=2:
              schema:
                $ref: '#/components/schemas/TimeSeries'
            application/xml:
              schema:
                $ref: '#/components/schemas/TimeSeries'
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSeries'
            '':
              schema:
                $ref: '#/components/schemas/TimeSeries'
        '400':
          description: Invalid parameter combination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: The provided combination of parameters did not find a timeseries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: Requested format is not implemented
      security: []
  /cwms-data/timeseries/recent:
    get:
      tags:
        - TimeSeries
      summary: Get cwmsData timeseries recent
      description: Returns CWMS Timeseries Groups Data
      operationId: getCwmsDataTimeseriesRecent
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the timeseries group(s) whose data is to be included in the response. If this field is not specified, matching timeseries groups information from all offices shall be returned.
          schema:
            type: string
        - name: category-id
          in: query
          description: Specifies the category id of the timeseries to be included in the response.  Optional.
          schema:
            type: string
        - name: group-id
          in: query
          description: Specifies the group id of the timeseries to be included in the response.  Optional.
          schema:
            type: string
        - name: ts-ids
          in: query
          description: Accepts a comma separated list of timeseries ids to be included in the response.  Optional. Cannot be used in combination with category_id and group_id.
          schema:
            type: string
        - name: unit-system
          in: query
          description: Unit System desired in response. Can be SI (International Scientific) or EN (Imperial.) If unspecified, defaults to EN.
          schema:
            $ref: '#/components/schemas/UnitSystem'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tsv'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the timeseries group(s) were not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: request format is not implemented
      security: []
  /cwms-data/standard-text-id/{standard-text-id}:
    get:
      tags:
        - Standard Text
      summary: Get cwmsData standardTextId with standardTextId
      description: Retrieve a single Standard Text value
      operationId: getCwmsDataStandardTextIdWithStandardTextId
      parameters:
        - name: standard-text-id
          in: path
          description: Specifies the text id of the standard text to retrieve. Default includes all text ids
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of thestandard text. Default includes all offices
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/StandardTextValue'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Standard Text
      summary: Delete cwmsData standardTextId with standardTextId
      description: Delete a single Standard Text value
      operationId: deleteCwmsDataStandardTextIdWithStandardTextId
      parameters:
        - name: standard-text-id
          in: path
          description: Specifies the text id of the standard text to delete
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of thestandard text.
          required: true
          schema:
            type: string
        - name: method
          in: query
          description: Specifies the delete method used.
          required: true
          schema:
            $ref: '#/components/schemas/DeleteMethod'
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/standard-text-id:
    get:
      tags:
        - Standard Text
      summary: Get cwmsData standardTextId
      description: Retrieve a Standard Text catalog
      operationId: getCwmsDataStandardTextId
      parameters:
        - name: office-mask
          in: query
          description: Specifies the office filter of thestandard text.
          schema:
            type: string
        - name: standard-text-id-mask
          in: query
          description: Specifies the text id filter of the standard text
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/StandardTextCatalog'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Standard Text
      summary: Post cwmsData standardTextId
      description: Create new Standard Text
      operationId: postCwmsDataStandardTextId
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/StandardTextValue'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/timeseries/text:
    get:
      tags:
        - Text-TimeSeries
      summary: Retrieve text time series values for a provided time window and date version.If individual values exceed 64 kilobytes, a URL to a separate download is provided instead of being included in the returned payload from this request.
      operationId: getCwmsDataTimeseriesText
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the Text TimeSeries whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: Specifies the ts-id of the text timeseries
          required: true
          schema:
            type: string
        - name: timezone
          in: query
          description: Specifies the time zone of the values of the begin and end fields (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
        - name: begin
          in: query
          description: The start of the time window
          required: true
          schema:
            type: string
        - name: end
          in: query
          description: The end of the time window.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/TextTimeSeries'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Text-TimeSeries
      summary: Post cwmsData timeseries text
      description: Create new TextTimeSeries
      operationId: postCwmsDataTimeseriesText
      parameters:
        - name: replace-all
          in: query
          description: Whether to replace any and all existing text with the specified text. Default is false
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/TextTimeSeries'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/timeseries/text/{name}:
    delete:
      tags:
        - Text-TimeSeries
      summary: Delete cwmsData timeseries text with name
      description: Deletes requested text timeseries id
      operationId: deleteCwmsDataTimeseriesTextWithName
      parameters:
        - name: name
          in: path
          description: The time series identifier to be deleted
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the timeseries identifier to be deleted
          required: true
          schema:
            type: string
        - name: text-mask
          in: query
          description: The standard text pattern to match. Use glob-style wildcard characters instead of sql-style wildcard characters for pattern matching.  For StandardTextTimeSeries this should be the Standard_Text_Id (such as 'E' for ESTIMATED)
          required: true
          schema:
            type: string
        - name: timezone
          in: query
          description: Specifies the time zone of the values of the begin and end fields (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
        - name: begin
          in: query
          description: The start of the time window
          required: true
          schema:
            type: string
        - name: end
          in: query
          description: The end of the time window.
          required: true
          schema:
            type: string
        - name: version-date
          in: query
          description: The version date for the time series.  If not specified, maximum version date is used.
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Text-TimeSeries
      summary: Patch cwmsData timeseries text with name
      description: Updates a text timeseries
      operationId: patchCwmsDataTimeseriesTextWithName
      parameters:
        - name: name
          in: path
          description: The id of the text timeseries to be updated
          required: true
          schema:
            type: string
        - name: replace-all
          in: query
          description: Whether to replace any and all existing text with the specified text. Default is:true
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/TextTimeSeries'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/timeseries/text/{name}/value:
    get:
      tags:
        - Text-TimeSeries
      summary: Get cwmsData timeseries text with name value
      operationId: getCwmsDataTimeseriesTextWithNameValue
      parameters:
        - name: name
          in: path
          description: Specifies the id of the text timeseries
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the Text TimeSeries whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: timezone
          in: query
          description: Specifies the time zone of the values of the begin and end fields (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
        - name: date
          in: query
          description: The date of the text value to retrieve
          required: true
          schema:
            type: string
        - name: version-date
          in: query
          description: The version date for the value to retrieve.
          schema:
            type: string
        - name: clob-id
          in: query
          description: Will be removed in a schema update. This is a placeholder for integration testing with schema 23.3.16
          deprecated: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /cwms-data/timeseries/binary:
    get:
      tags:
        - Binary-TimeSeries
      summary: Retrieve binary time series values for a provided time window and date version.If individual values exceed 64 kilobytes, a URL to a separate download is provided instead of being included in the returned payload from this request.
      operationId: getCwmsDataTimeseriesBinary
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the Binary TimeSeries whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: Specifies the id of the binary timeseries
          required: true
          schema:
            type: string
        - name: binary-type-mask
          in: query
          description: The data type pattern expressed as either an internet media type (e.g. 'image/*') or a file extension (e.g. '.*'). Use glob-style wildcard characters as shown above instead of sql-style wildcard characters for pattern matching. Default is:*
          schema:
            type: string
        - name: timezone
          in: query
          description: Specifies the time zone of the values of the begin and end fields (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
        - name: begin
          in: query
          description: The start of the time window
          required: true
          schema:
            type: string
        - name: end
          in: query
          description: The end of the time window
          required: true
          schema:
            type: string
        - name: version-date
          in: query
          description: The version date for the time series.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/BinaryTimeSeries'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Binary-TimeSeries
      summary: Post cwmsData timeseries binary
      description: Create new BinaryTimeSeries
      operationId: postCwmsDataTimeseriesBinary
      parameters:
        - name: replace-all
          in: query
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/BinaryTimeSeries'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/timeseries/binary/{name}:
    delete:
      tags:
        - Binary-TimeSeries
      summary: Delete cwmsData timeseries binary with name
      description: Deletes requested binary timeseries id
      operationId: deleteCwmsDataTimeseriesBinaryWithName
      parameters:
        - name: name
          in: path
          description: The time series identifier to be deleted
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the timeseries identifier to be deleted
          required: true
          schema:
            type: string
        - name: binary-type-mask
          in: query
          description: The data type pattern expressed as either an internet media type (e.g. 'image/*') or a file extension (e.g. '.*'). Use glob-style wildcard characters as shown above instead of sql-style wildcard characters for pattern matching. Default:*
          schema:
            type: string
        - name: timezone
          in: query
          description: Specifies the time zone of the values of the begin and end fields (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
        - name: begin
          in: query
          description: The start of the time window
          required: true
          schema:
            type: string
        - name: end
          in: query
          description: 'The end of the time window. '
          required: true
          schema:
            type: string
        - name: version-date
          in: query
          description: The version date for the time series.  If not specified, the maximum version date is used.
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Binary-TimeSeries
      summary: Patch cwmsData timeseries binary with name
      description: Updates a binary timeseries
      operationId: patchCwmsDataTimeseriesBinaryWithName
      parameters:
        - name: name
          in: path
          description: The id of the binary timeseries to be updated
          required: true
          schema:
            type: string
        - name: replace-all
          in: query
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/BinaryTimeSeries'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/timeseries/binary/{name}/value:
    get:
      tags:
        - Binary-TimeSeries
      summary: Get cwmsData timeseries binary with name value
      operationId: getCwmsDataTimeseriesBinaryWithNameValue
      parameters:
        - name: name
          in: path
          description: Specifies the id of the binary timeseries
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the Binary TimeSeries whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: timezone
          in: query
          description: Specifies the time zone of the values of the begin and end fields (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
        - name: date
          in: query
          description: The date of the binary value to retrieve
          required: true
          schema:
            type: string
        - name: version-date
          in: query
          description: The version date for the value to retrieve.
          schema:
            type: string
        - name: blob-id
          in: query
          description: Will be removed in a schema update. This is a placeholder for integration testing with schema 23.3.16
          deprecated: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /cwms-data/timeseries/category/{category-id}:
    get:
      tags:
        - TimeSeries Categories
      summary: Get cwmsData timeseries category with categoryId
      description: Retrieves requested timeseries category
      operationId: getCwmsDataTimeseriesCategoryWithCategoryId
      parameters:
        - name: category-id
          in: path
          description: Specifies the Category whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the timeseries category whose data is to be included in the response.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSeriesCategory'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the timeseries category was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: request format is not implemented
      security: []
    delete:
      tags:
        - TimeSeries Categories
      summary: Delete cwmsData timeseries category with categoryId
      description: Deletes requested time series category
      operationId: deleteCwmsDataTimeseriesCategoryWithCategoryId
      parameters:
        - name: category-id
          in: path
          description: The time series category to be deleted
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the time series category to be deleted
          required: true
          schema:
            type: string
        - name: cascade-delete
          in: query
          description: 'Specifies whether to delete any time series groups in this time series category. Default: false'
          schema:
            type: boolean
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/timeseries/category:
    get:
      tags:
        - TimeSeries Categories
      summary: Get cwmsData timeseries category
      description: Returns CWMS timeseries category Data
      operationId: getCwmsDataTimeseriesCategory
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the timeseries category(ies) whose data is to be included in the response. If this field is not specified, matching timeseries category information from all offices shall be returned.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeSeriesCategory'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the categories were not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: request format is not implemented
      security: []
    post:
      tags:
        - TimeSeries Categories
      summary: Post cwmsData timeseries category
      description: Create new TimeSeriesCategory
      operationId: postCwmsDataTimeseriesCategory
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeSeriesCategory'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/timeseries/identifier-descriptor/{timeseries-id}:
    get:
      tags:
        - TimeSeries Identifier
      summary: Get cwmsData timeseries identifierDescriptor with timeseriesId
      description: Retrieves requested timeseries identifier descriptor
      operationId: getCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesId
      parameters:
        - name: timeseries-id
          in: path
          description: Specifies the identifier of the timeseries to be included in the response.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the timeseries identifier to be included in the response.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/TimeSeriesIdentifierDescriptor'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the timeseries identifier descriptor was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: request format is not implemented
      security: []
    delete:
      tags:
        - TimeSeries Identifier
      summary: Delete cwmsData timeseries identifierDescriptor with timeseriesId
      description: Deletes requested timeseries identifier
      operationId: deleteCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesId
      parameters:
        - name: timeseries-id
          in: path
          description: 'The timeseries-id of the timeseries to be deleted. '
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the timeseries to be deleted.
          required: true
          schema:
            type: string
        - name: method
          in: query
          description: Specifies the delete method used.
          required: true
          schema:
            $ref: '#/components/schemas/DeleteMethod'
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - TimeSeries Identifier
      summary: Patch cwmsData timeseries identifierDescriptor with timeseriesId
      operationId: patchCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesId
      parameters:
        - name: timeseries-id
          in: path
          required: true
          schema:
            type: string
        - name: timeseries-id
          in: query
          description: A new timeseries-id.  If specified a rename operation will be performed and snap-forward, snap-backward, and active must not be provided
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the timeseries identifier to be updated
          required: true
          schema:
            type: string
        - name: interval-offset
          in: query
          description: The offset into the data interval in minutes.  If specified and a new timeseries-id is also specified both will be passed to a rename operation.  May also be passed to update operation.
          schema:
            type: integer
            format: int64
        - name: snap-forward
          in: query
          description: The new snap forward tolerance in minutes. This specifies how many minutes before the expected data time that data will be considered to be on time.
          schema:
            type: integer
            format: int64
        - name: snap-backward
          in: query
          description: The new snap backward tolerance in minutes. This specifies how many minutes after the expected data time that data will be considered to be on time.
          schema:
            type: integer
            format: int64
        - name: active
          in: query
          description: '''True'' or ''true'' if the time series is active'
          schema:
            type: boolean
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/timeseries/identifier-descriptor:
    get:
      tags:
        - TimeSeries Identifier
      summary: Get cwmsData timeseries identifierDescriptor
      description: Returns CWMS timeseries identifier descriptorData
      operationId: getCwmsDataTimeseriesIdentifierDescriptor
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the timeseries identifier(s) whose data is to be included in the response. If this field is not specified, matching timeseries identifier information from all offices shall be returned.
          schema:
            type: string
        - name: timeseries-id-regex
          in: query
          description: A case insensitive RegExp that will be applied to the timeseries-id field. If this field is not specified the results will not be constrained by timeseries-id.
          schema:
            type: string
        - name: page
          in: query
          description: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
          schema:
            type: string
        - name: page-size
          in: query
          description: How many entries per page returned. Default 500.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/TimeSeriesIdentifierDescriptors'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the time series identifier descriptors were not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: request format is not implemented
      security: []
    post:
      tags:
        - TimeSeries Identifier
      summary: Post cwmsData timeseries identifierDescriptor
      description: Create new TimeSeriesIdentifierDescriptor
      operationId: postCwmsDataTimeseriesIdentifierDescriptor
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/TimeSeriesIdentifierDescriptor'
          application/xml;version=2:
            schema:
              $ref: '#/components/schemas/TimeSeriesIdentifierDescriptor'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/timeseries/group/{group-id}:
    get:
      tags:
        - Timeseries Groups
      summary: Get cwmsData timeseries group with groupId
      description: Retrieves requested timeseries group
      operationId: getCwmsDataTimeseriesGroupWithGroupId
      parameters:
        - name: group-id
          in: path
          description: Specifies the timeseries group whose data is to be included in the response
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the timeseries group whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: category-id
          in: query
          description: Specifies the category containing the timeseries group whose data is to be included in the response.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSeriesGroup'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Timeseries Groups
      summary: Delete cwmsData timeseries group with groupId
      description: Deletes requested time series group
      operationId: deleteCwmsDataTimeseriesGroupWithGroupId
      parameters:
        - name: group-id
          in: path
          description: The time series group to be deleted
          required: true
          schema:
            type: string
        - name: category-id
          in: query
          description: Specifies the time series category of the time series group to be deleted
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the time series group to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Timeseries Groups
      summary: Patch cwmsData timeseries group with groupId
      description: Update existing TimeSeriesGroup
      operationId: patchCwmsDataTimeseriesGroupWithGroupId
      parameters:
        - name: group-id
          in: path
          required: true
          schema:
            type: string
        - name: replace-assigned-ts
          in: query
          description: 'Specifies whether to unassign all existing time series before assigning new time series specified in the content body Default: false'
          schema:
            type: boolean
        - name: office
          in: query
          description: Specifies the owning office of the time series group to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeSeriesGroup'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/timeseries/group:
    get:
      tags:
        - Timeseries Groups
      summary: Get cwmsData timeseries group
      description: Returns CWMS Timeseries Groups Data
      operationId: getCwmsDataTimeseriesGroup
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the timeseries group(s) whose data is to be included in the response. If this field is not specified, matching timeseries groups information from all offices shall be returned.
          schema:
            type: string
        - name: include-assigned
          in: query
          description: 'Include the assigned timeseries in the returned timeseries groups. (default: true)'
          schema:
            type: boolean
        - name: timeseries-category-like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> matching against the timeseries category id
          schema:
            type: string
        - name: timeseries-group-like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> matching against the timeseries group id
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeSeriesGroup'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the timeseries group(s) were not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: request format is not implemented
      security: []
    post:
      tags:
        - Timeseries Groups
      summary: Post cwmsData timeseries group
      description: Create new TimeSeriesGroup
      operationId: postCwmsDataTimeseriesGroup
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeSeriesGroup'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/timeseries:
    get:
      tags:
        - TimeSeries
      summary: Get cwmsData timeseries
      operationId: getCwmsDataTimeseries
      parameters:
        - name: name
          in: query
          description: Specifies the name(s) of the time series whose data is to be included in the response. A case insensitive comparison is used to match names.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the time series(s) whose data is to be included in the response. Required for:application/json;version=2 and application/xml;version=2. For other formats, if this field is not specified, matching location level information from all offices shall be returned.
          schema:
            type: string
        - name: unit
          in: query
          description: |-
            Specifies the unit or unit system of the response. Valid values for the unit field are: 
            * `EN`  (default) Specifies English unit system.  Location level values will be in the default English units for their parameters.
            * `SI`  Specifies the SI unit system.  Location level values will be in the default SI units for their parameters.
            * `Other`  Any unit returned in the response to the units URI request that is appropriate for the requested parameters.
          schema:
            type: string
        - name: version-date
          in: query
          description: Specifies the version date of a time series trace to be selected. The format for this field is ISO 8601 extended, i.e., 'format', e.g., '2021-06-10T13:00:00-0700' .If field is empty, query will return a max aggregate for the timeseries. Only supported for:application/json;version=2 and application/xml;version=2
          schema:
            type: string
        - name: datum
          in: query
          description: |-
            Specifies the elevation datum of the response. This field affects only elevation location levels. Valid values for this field are:
            * `NAVD88`  The elevation values will in the specified or default units above the NAVD-88 datum.
            * `NGVD29`  The elevation values will be in the specified or default units above the NGVD-29 datum.  This parameter is not supported for:application/json;version=2 or application/xml;version=2
          schema:
            type: string
        - name: begin
          in: query
          description: Specifies the start of the time window for data to be included in the response. If this field is not specified, any required time window begins 24 hours prior to the specified or default end time. The format for this field is ISO 8601 extended, with optional offset and timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
          schema:
            type: string
        - name: end
          in: query
          description: Specifies the end of the time window for data to be included in the response. If this field is not specified, any required time window ends at the current time. The format for this field is ISO 8601 extended, with optional timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
          schema:
            type: string
        - name: timezone
          in: query
          description: "Specifies the time zone of the values of the begin and end fields (unless otherwise specified).  For application/json;version=2 and application/xml;version=2 the results are returned in UTC.  For other formats this parameter affects the time zone of times in the response. If this field is not specified, the default time zone of UTC shall be used.\r\nIgnored if begin was specified with offset and timezone."
          schema:
            type: string
        - name: trim
          in: query
          description: Specifies whether to trim missing values from the beginning and end of the retrieved values. Only supported for:application/json;version=2 and application/xml;version=2. Default is true.
          schema:
            type: boolean
        - name: format
          in: query
          description: |-
            Specifies the encoding format of the response. Valid values for the format field for this URI are:
            * `tab`
            * `csv`
            * `xml`
            * `wml2` (only if name field is specified)
            * `json` (default)
          schema:
            type: string
        - name: page
          in: query
          description: This end point can return large amounts of data as a series of pages. This parameter is used to describes the current location in the response stream.  This is an opaque value, and can be obtained from the 'next-page' value in the response.
          schema:
            type: string
        - name: page-size
          in: query
          description: How many entries per page returned. Default 500.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A list of elements of the data set you've selected.
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/TimeSeries'
            application/xml;version=2:
              schema:
                $ref: '#/components/schemas/TimeSeries'
            application/xml:
              schema:
                $ref: '#/components/schemas/TimeSeries'
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSeries'
            '':
              schema:
                $ref: '#/components/schemas/TimeSeries'
        '400':
          description: Invalid parameter combination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: The provided combination of parameters did not find a timeseries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: Requested format is not implemented
      security: []
    post:
      tags:
        - TimeSeries
      summary: Post cwmsData timeseries
      description: 'Used to create and save time-series data. Data to be stored must have time stamps in UTC represented as epoch milliseconds '
      operationId: postCwmsDataTimeseries
      parameters:
        - name: timezone
          in: query
          description: "Specifies the time zone of the version-date field (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.\r\nIgnored if version-date was specified with offset and timezone."
          schema:
            type: string
        - name: create-as-lrts
          in: query
          description: Flag indicating if timeseries should be created as Local Regular Time Series. 'True' or 'False', default is 'False'
          schema:
            type: boolean
        - name: store-rule
          in: query
          description: |-
            The business rule to use when merging the incoming with existing data
            <table  border="1" summary="">
            <tr><td colspan=2>Store Rules</td></tr>
            <tr>
                <td>Delete Insert</td>
                <td>All existing data in the time window will be deleted and then replaced with the new dataset.</td>
            </tr>
            <tr>
                <td>Replace All</td>
                <td>
                    <ul>
                        <li>When the new dataset's date/time exactly matches the date/time of an existing data value, the new data value will replace the existing data.</li>
                    <li>When the new dataset's data/time does not match an existing data/time (i.e., a new data/time - data value pair) then an insert to the database will occur.</li>
                        <li>When there's an existing "data/time - data value pair" without a corresponding date/time value pair, no change will happen to the existing date/time value pair.</li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Replace With Non Missing</td>
                <td>
                    <ul>
                        <li>New data is always inserted, i.e., an existing date/time-value pair does not already exist for the record.</li>
                        <li>If date/time-value pair does exist, then only non-missing value will replace the existing data value*.</li>
                    </ul>
                </td>
            <tr>
                <td>Replace Missing Values Only</td>
                <td>
                    <ul>
                        <li>New data is always inserted, i.e., an existing date/time-value pair does not already exist for the record.</li>
                        <li>If date/time-value pair does exist, then only replace an existing data/time-value pair whose missing flag was set.</li>
                    </ul>
                </td>
            <tr>
                <td>Do Not Replace</td>
                <td>
                    Only inserts new data values if an existing date/time-value pair does not already exist.
                    Note: an existing date/time-value pair whose missing value quality bit is set will NOT be overwritten.
                </td>
            </tr>
            </table>
          schema:
            $ref: '#/components/schemas/StoreRule'
        - name: override-protection
          in: query
          description: A flag to ignore the protected data quality when storing data. 'True' or 'False'
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/TimeSeries'
          application/xml;version=2:
            schema:
              $ref: '#/components/schemas/TimeSeries'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/timeseries/{timeseries}:
    delete:
      tags:
        - TimeSeries
      summary: Delete cwmsData timeseries with timeseries
      operationId: deleteCwmsDataTimeseriesWithTimeseries
      parameters:
        - name: timeseries
          in: path
          description: 'The timeseries-id of the timeseries values to be deleted. '
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the office of the timeseries to be deleted.
          required: true
          schema:
            type: string
        - name: begin
          in: query
          description: The start of the time window to delete. The format for this field is ISO 8601 extended, with optional offset and timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
          required: true
          schema:
            type: string
        - name: end
          in: query
          description: The end of the time window to delete.The format for this field is ISO 8601 extended, with optional offset and timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
          required: true
          schema:
            type: string
        - name: timezone
          in: query
          description: This field specifies a default timezone to be used if the format of the begin, end, or version-date parameters do not include offset or time zone information. Defaults to UTC.
          schema:
            type: string
        - name: version-date
          in: query
          description: The version date/time of the time series in the specified or default time zone. If NULL, the earliest or latest version date will be used depending on p_max_version.
          schema:
            type: string
        - name: start-time-inclusive
          in: query
          description: A flag specifying whether any data at the start time should be deleted ('True') or only data <b><em>after</em></b> the start time ('False').  Default value is True
          schema:
            type: boolean
        - name: end-time-inclusive
          in: query
          description: A flag ('True'/'False') specifying whether any data at the end time should be deleted ('True') or only data <b><em>before</em></b> the end time ('False'). Default value is False
          schema:
            type: boolean
        - name: max-version
          in: query
          description: A flag ('True'/'False') specifying whether to use the earliest ('False') or latest ('True') version date for each time if p_version_date is NULL.  Default is 'True'
          schema:
            type: boolean
        - name: override-protection
          in: query
          description: A flag ('True'/'False') specifying whether to delete protected data. Default is False
          schema:
            type: boolean
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - TimeSeries
      summary: Patch cwmsData timeseries with timeseries
      description: Update a TimeSeries with provided values
      operationId: patchCwmsDataTimeseriesWithTimeseries
      parameters:
        - name: timeseries
          in: path
          description: Full CWMS Timeseries name
          required: true
          schema:
            type: string
        - name: timezone
          in: query
          description: "Specifies the time zone of the version-date field (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.\r\nIgnored if version-date was specified with offset and timezone."
          schema:
            type: string
        - name: create-as-lrts
          in: query
          description: ''
          schema:
            type: boolean
        - name: store-rule
          in: query
          description: |-
            The business rule to use when merging the incoming with existing data
            <table  border="1" summary="">
            <tr><td colspan=2>Store Rules</td></tr>
            <tr>
                <td>Delete Insert</td>
                <td>All existing data in the time window will be deleted and then replaced with the new dataset.</td>
            </tr>
            <tr>
                <td>Replace All</td>
                <td>
                    <ul>
                        <li>When the new dataset's date/time exactly matches the date/time of an existing data value, the new data value will replace the existing data.</li>
                    <li>When the new dataset's data/time does not match an existing data/time (i.e., a new data/time - data value pair) then an insert to the database will occur.</li>
                        <li>When there's an existing "data/time - data value pair" without a corresponding date/time value pair, no change will happen to the existing date/time value pair.</li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Replace With Non Missing</td>
                <td>
                    <ul>
                        <li>New data is always inserted, i.e., an existing date/time-value pair does not already exist for the record.</li>
                        <li>If date/time-value pair does exist, then only non-missing value will replace the existing data value*.</li>
                    </ul>
                </td>
            <tr>
                <td>Replace Missing Values Only</td>
                <td>
                    <ul>
                        <li>New data is always inserted, i.e., an existing date/time-value pair does not already exist for the record.</li>
                        <li>If date/time-value pair does exist, then only replace an existing data/time-value pair whose missing flag was set.</li>
                    </ul>
                </td>
            <tr>
                <td>Do Not Replace</td>
                <td>
                    Only inserts new data values if an existing date/time-value pair does not already exist.
                    Note: an existing date/time-value pair whose missing value quality bit is set will NOT be overwritten.
                </td>
            </tr>
            </table>
          schema:
            $ref: '#/components/schemas/StoreRule'
        - name: override-protection
          in: query
          description: A flag to ignore the protected data quality when storing data.  "'true' or 'false'"
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/TimeSeries'
          application/xml;version=2:
            schema:
              $ref: '#/components/schemas/TimeSeries'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/ratings/template/{template-id}:
    get:
      tags:
        - Ratings
      summary: Get cwmsData ratings template with templateId
      operationId: getCwmsDataRatingsTemplateWithTemplateId
      parameters:
        - name: template-id
          in: path
          description: Specifies the template whose data is to be included in the response
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the Rating Templates whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RatingTemplate'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Ratings
      summary: Delete cwmsData ratings template with templateId
      description: Deletes requested rating specification
      operationId: deleteCwmsDataRatingsTemplateWithTemplateId
      parameters:
        - name: template-id
          in: path
          description: The rating-template-id of the ratings data to be deleted.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the ratings to be deleted.
          required: true
          schema:
            type: string
        - name: method
          in: query
          description: Specifies the delete method used.
          required: true
          schema:
            $ref: '#/components/schemas/DeleteMethod'
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/ratings/template:
    get:
      tags:
        - Ratings
      summary: Get cwmsData ratings template
      operationId: getCwmsDataRatingsTemplate
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the Rating Templates whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
          schema:
            type: string
        - name: template-id-mask
          in: query
          description: RegExp that specifies the rating template IDs to be included in the response. If this field is not specified, all rating templates shall be returned.
          schema:
            type: string
        - name: page
          in: query
          description: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
          schema:
            type: string
        - name: page-size
          in: query
          description: How many entries per page returned. Default 100.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/RatingTemplates'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Ratings
      summary: Post cwmsData ratings template
      description: Create new Rating Template
      operationId: postCwmsDataRatingsTemplate
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/xml;version=2:
            schema:
              $ref: '#/components/schemas/RatingTemplate'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/ratings/spec/{rating-id}:
    get:
      tags:
        - Ratings
      summary: Get cwmsData ratings spec with ratingId
      operationId: getCwmsDataRatingsSpecWithRatingId
      parameters:
        - name: rating-id
          in: path
          description: Specifies the rating-id of the Rating Spec to be included in the response
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the Rating Specs whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/RatingSpec'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Ratings
      summary: Delete cwmsData ratings spec with ratingId
      description: Deletes requested rating specification
      operationId: deleteCwmsDataRatingsSpecWithRatingId
      parameters:
        - name: rating-id
          in: path
          description: The rating-spec-id of the ratings data to be deleted.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the ratings to be deleted.
          required: true
          schema:
            type: string
        - name: method
          in: query
          description: Specifies the delete method used.
          required: true
          schema:
            $ref: '#/components/schemas/DeleteMethod'
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/ratings/spec:
    get:
      tags:
        - Ratings
      summary: Get cwmsData ratings spec
      operationId: getCwmsDataRatingsSpec
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the Rating Specs whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
          schema:
            type: string
        - name: rating-id-mask
          in: query
          description: Posix <a href="regexp.html">regular expression</a>  that specifies the rating IDs to be included in the response. If this field is not specified, all Rating Specs shall be returned.
          schema:
            type: string
        - name: page
          in: query
          description: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
          schema:
            type: string
        - name: page-size
          in: query
          description: How many entries per page returned. Default 100.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/RatingSpecs'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Ratings
      summary: Post cwmsData ratings spec
      description: Create new Rating Specification
      operationId: postCwmsDataRatingsSpec
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/xml;version=2:
            schema:
              $ref: '#/components/schemas/RatingSpec'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/ratings/metadata:
    get:
      tags:
        - Ratings
      summary: Get cwmsData ratings metadata
      operationId: getCwmsDataRatingsMetadata
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the Rating Specs whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
          schema:
            type: string
        - name: rating-id-mask
          in: query
          description: RegExp that specifies the rating IDs to be included in the response. If this field is not specified, all Rating Specs shall be returned.
          schema:
            type: string
        - name: start
          in: query
          description: Specifies the start of the time window of the effective dates to be included. If this field is not specified no start time will be used.
          schema:
            type: string
        - name: end
          in: query
          description: Specifies the end of the time window for effective dates to be included. If this field is not specified no end time will be used.
          schema:
            type: string
        - name: timezone
          in: query
          description: Specifies the time zone of the values of the begin and end fields (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
        - name: page
          in: query
          description: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
          schema:
            type: string
        - name: page-size
          in: query
          description: How many entries per page returned. Default 50.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/RatingMetadataList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /cwms-data/ratings/{rating-id}:
    get:
      tags:
        - Ratings
      summary: Get cwmsData ratings with ratingId
      description: Returns CWMS Rating Data
      operationId: getCwmsDataRatingsWithRatingId
      parameters:
        - name: rating-id
          in: path
          description: 'The rating-id of the effective dates to be retrieve. '
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the ratingset to be included in the response.
          required: true
          schema:
            type: string
        - name: begin
          in: query
          description: Specifies the start of the time window for data to be included in the response. If this field is not specified no start time will be used.
          schema:
            type: string
        - name: end
          in: query
          description: Specifies the end of the time window for data to be included in the response. If this field is not specified no end time will be used.
          schema:
            type: string
        - name: timezone
          in: query
          description: Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
        - name: method
          in: query
          description: Specifies the retrieval method used.  If no method is provided EAGER will be used.
          schema:
            $ref: '#/components/schemas/DatabaseLoadMethod'
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/Unit'
            application/xml;version=2:
              schema:
                $ref: '#/components/schemas/Unit'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Ratings
      summary: Delete cwmsData ratings with ratingId
      operationId: deleteCwmsDataRatingsWithRatingId
      parameters:
        - name: rating-id
          in: path
          description: 'The rating-id of the effective dates to be deleted. '
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the office of the ratings to be deleted.
          required: true
          schema:
            type: string
        - name: begin
          in: query
          description: The start of the time window to delete. The format for this field is ISO 8601 extended, with optional offset and timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
          required: true
          schema:
            type: string
        - name: end
          in: query
          description: The end of the time window to delete. The format for this field is ISO 8601 extended, with optional offset and timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
          required: true
          schema:
            type: string
        - name: timezone
          in: query
          description: This field specifies a default timezone to be used if the format of the begin, end, or version-date parameters do not include offset or time zone information. Defaults to UTC.
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Ratings
      summary: Patch cwmsData ratings with ratingId
      description: Update a RatingSet
      operationId: patchCwmsDataRatingsWithRatingId
      parameters:
        - name: rating-id
          in: path
          required: true
          schema:
            type: string
        - name: store-template
          in: query
          description: 'Also store updates to the rating template. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/xml;version=2:
            schema:
              $ref: '#/components/schemas/Unit'
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/Unit'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/ratings:
    get:
      tags:
        - Ratings
      summary: Get cwmsData ratings
      operationId: getCwmsDataRatings
      parameters:
        - name: name
          in: query
          description: Specifies the name(s) of the rating whose data is to be included in the response. A case insensitive comparison is used to match names.
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the Rating(s) whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
          schema:
            type: string
        - name: unit
          in: query
          description: |-
            Specifies the unit or unit system of the response. Valid values for the unit field are:
            * `EN`  Specifies English unit system.  Rating values will be in the default English units for their parameters.
            * `SI`   Specifies the SI unit system.  Rating values will be in the default SI units for their parameters.
            * `Other`  Any unit returned in the response to the units URI request that is appropriate for the requested parameters.
          schema:
            type: string
        - name: datum
          in: query
          description: |-
            Specifies the elevation datum of the response. This field affects only elevation Ratings. Valid values for this field are:
            * `NAVD88`  The elevation values will in the specified or default units above the NAVD-88 datum.
            * `NGVD29`  The elevation values will be in the specified or default units above the NGVD-29 datum.
          schema:
            type: string
        - name: at
          in: query
          description: Specifies the start of the time window for data to be included in the response. If this field is not specified, any required time window begins 24 hours prior to the specified or default end time.
          schema:
            type: string
        - name: end
          in: query
          description: Specifies the end of the time window for data to be included in the response. If this field is not specified, any required time window ends at the current time
          schema:
            type: string
        - name: timezone
          in: query
          description: Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
        - name: format
          in: query
          description: |-
            Specifies the encoding format of the response. Valid values for the format field for this URI are:
            * `tab`
            * `csv`
            * `xml`
            * `json` (default)
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
            application/xml:
              schema:
                $ref: '#/components/schemas/Unit'
            text/tab-separated-values:
              schema:
                type: string
            text/csv:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: The provided combination of parameters did not find a rating table.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: Requested format is not implemented
      security: []
    post:
      tags:
        - Ratings
      summary: Post cwmsData ratings
      description: Create new RatingSet
      operationId: postCwmsDataRatings
      parameters:
        - name: store-template
          in: query
          description: 'Also store updates to the rating template. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/xml;version=2:
            schema:
              $ref: '#/components/schemas/Unit'
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/Unit'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/catalog/{dataset}:
    get:
      tags:
        - Catalog
      summary: Get cwmsData catalog with dataset
      operationId: getCwmsDataCatalogWithDataset
      parameters:
        - name: dataset
          in: path
          description: A list of what data? E.g. Timeseries, Locations, Ratings, etc
          required: true
          schema:
            $ref: '#/components/schemas/CatalogableEndpoint'
        - name: page
          in: query
          description: This end point can return a lot of data, this identifies where in the request you are.
          schema:
            type: string
        - name: page-size
          in: query
          description: How many entries per page returned. Default 500.
          schema:
            type: integer
            format: int32
        - name: unit-system
          in: query
          description: Unit System desired in response. Can be SI (International Scientific) or EN (Imperial.) If unspecified, defaults to SI.
          schema:
            $ref: '#/components/schemas/UnitSystem'
        - name: office
          in: query
          description: 3-4 letter office name representing the district you want to isolate data to.
          schema:
            type: string
        - name: like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> matching against the id
          schema:
            type: string
        - name: timeseries-category-like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> matching against the timeseries category id
          schema:
            type: string
        - name: timeseries-group-like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> matching against the timeseries group id
          schema:
            type: string
        - name: location-category-like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> matching against the location category id
          schema:
            type: string
        - name: location-group-like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> matching against the location group id
          schema:
            type: string
        - name: bounding-office-like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> matching against the location bounding office. When this field is used items with no bounding office set will not be present in results.
          schema:
            type: string
        - name: include-extents
          in: query
          description: Whether the returned catalog entries should include timeseries extents. Only valid for TIMESERIES. Default is true.
          schema:
            type: boolean
        - name: exclude-empty
          in: query
          description: Specifies whether Timeseries that have empty extents should be excluded from the results.  For purposes of this parameter 'empty' is defined as VERSION_TIME, EARLIEST_TIME, LATEST_TIME and LAST_UPDATE all being null. This parameter does not control whether the extents are returned to the user, only whether matching timeseries are excluded. Only valid for TIMESERIES. Default is true.
          schema:
            type: boolean
        - name: location-kind-like
          in: query
          description: 'Posix <a href="regexp.html">regular expression</a> matching against the location kind.  The location-kind is typically unset or one of the following: {"SITE", "EMBANKMENT", "OVERFLOW", "TURBINE", "STREAM", "PROJECT", "STREAMGAGE", "BASIN", "OUTLET", "LOCK", "GATE"}.  Multiple kinds can be matched by using Regular Expression OR clauses. For example: "(SITE|STREAM)"'
          schema:
            type: string
        - name: location-type-like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> matching against the location type.
          schema:
            type: string
      responses:
        '200':
          description: A list of elements the data set you've selected.
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/Catalog'
            application/xml:
              schema:
                $ref: '#/components/schemas/Catalog'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /cwms-data/basins/{basin-id}:
    get:
      tags:
        - Basins
      summary: Get cwmsData basins with basinId
      description: Returns CWMS Basin Data
      operationId: getCwmsDataBasinsWithBasinId
      parameters:
        - name: basin-id
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Specifies the name of the basin to be retrieved.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the basin whose data is to be included in the response. If this field is not specified, matching basin information from all offices shall be returned.
          schema:
            type: string
        - name: unit
          in: query
          description: |-
            Specifies the unit or unit system of the response. Valid values for the unit field are:
            * `EN`  Specifies English unit system. Basin values will be in the default English units for their parameters. (This is default if no value is entered)
            * `SI`  Specifies the SI unit system. Basin values will be in the default SI units for their parameters.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.named+pg+json:
              schema:
                $ref: '#/components/schemas/Basin'
            application/json;version=1:
              schema:
                $ref: '#/components/schemas/Basin'
            application/json:
              schema:
                $ref: '#/components/schemas/Basin'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: The provided combination of parameters did not find a basin.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: Requested format is not implemented
      security: []
    delete:
      tags:
        - Basins
      summary: Delete cwmsData basins with basinId
      description: Renames CWMS Basin
      operationId: deleteCwmsDataBasinsWithBasinId
      parameters:
        - name: basin-id
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Specifies the name of the basin to be deleted.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the basin to be renamed.
          required: true
          schema:
            type: string
        - name: delete-mode
          in: query
          description: Specifies the delete method used.
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: The provided combination of parameters did not find a basin.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: Requested format is not implemented
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Basins
      summary: Patch cwmsData basins with basinId
      description: Renames CWMS Basin
      operationId: patchCwmsDataBasinsWithBasinId
      parameters:
        - name: basin-id
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: Specifies the new name for the basin.
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: The provided combination of parameters did not find a basin.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: Requested format is not implemented
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/basins:
    get:
      tags:
        - Basins
      summary: Get cwmsData basins
      description: Returns CWMS Basin Data
      operationId: getCwmsDataBasins
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the basin whose data is to be included in the response. If this field is not specified, matching basin information from all offices shall be returned.
          schema:
            type: string
        - name: unit
          in: query
          description: |-
            Specifies the unit or unit system of the response. Valid values for the unit field are: 
            * `EN`  Specifies English unit system. Basin values will be in the default English units for their parameters. (This is default if no value is entered)
            * `SI`  Specifies the SI unit system. Basin values will be in the default SI units for their parameters.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.named+pg+json:
              schema:
                $ref: '#/components/schemas/Basin'
            application/json;version=1:
              schema:
                $ref: '#/components/schemas/Basin'
            application/json:
              schema:
                $ref: '#/components/schemas/Basin'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: The provided combination of parameters did not find a basin.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: Requested format is not implemented
      security: []
    post:
      tags:
        - Basins
      summary: Post cwmsData basins
      description: Creates CWMS Basin
      operationId: postCwmsDataBasins
      responses:
        '204':
          description: Basin successfully stored to CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: Requested format is not implemented
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/streams/{name}:
    get:
      tags:
        - Streams
      summary: Get cwmsData streams with name
      description: Returns CWMS Stream Data
      operationId: getCwmsDataStreamsWithName
      parameters:
        - name: name
          in: path
          description: Specifies the stream-id of the stream to be retrieved.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the stream to be retrieved.
          required: true
          schema:
            type: string
        - name: station-unit
          in: query
          description: Specifies the unit of measure for the station. Defaults to mi.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=1:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stream'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stream'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Streams
      summary: Delete cwmsData streams with name
      description: Delete CWMS Stream
      operationId: deleteCwmsDataStreamsWithName
      parameters:
        - name: name
          in: path
          description: Specifies the stream-id of the stream to be deleted.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the stream to be deleted.
          required: true
          schema:
            type: string
        - name: method
          in: query
          description: Specifies the delete method used. Defaults to "DELETE_KEY"
          schema:
            $ref: '#/components/schemas/DeleteMethod'
      responses:
        '204':
          description: Stream successfully deleted from CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the stream was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Streams
      summary: Patch cwmsData streams with name
      description: Rename CWMS Stream
      operationId: patchCwmsDataStreamsWithName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: 'Specifies the new stream-id. '
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the stream to be renamed.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Stream successfully renamed in CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/streams:
    get:
      tags:
        - Streams
      summary: Get cwmsData streams
      description: Returns matching CWMS Stream Data for a Reservoir Project.
      operationId: getCwmsDataStreams
      parameters:
        - name: office-mask
          in: query
          description: Office id for the reservoir project location associated with the streams.
          schema:
            type: string
        - name: stream-id-mask
          in: query
          description: Specifies the stream-id of the stream to be retrieved.
          schema:
            type: string
        - name: diverts-from-stream-id-mask
          in: query
          description: Specifies the stream-id of the stream that the returned streams flow from.
          schema:
            type: string
        - name: flows-into-stream-id-mask
          in: query
          description: Specifies the stream-id of the stream that the returned streams flow into.
          schema:
            type: string
        - name: station-unit
          in: query
          description: Specifies the unit of measure for the station. Defaults to mi.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=1:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stream'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stream'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Streams
      summary: Post cwmsData streams
      description: Create CWMS Stream
      operationId: postCwmsDataStreams
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=1:
            schema:
              $ref: '#/components/schemas/Stream'
        required: true
      responses:
        '204':
          description: Stream successfully stored to CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/stream-locations/{office}/{name}/downstream-locations:
    get:
      tags:
        - StreamLocations
      summary: Get cwmsData streamLocations with office with name downstreamLocations
      description: Returns matching downstream stream locations.
      operationId: getCwmsDataStreamLocationsWithOfficeWithNameDownstreamLocations
      parameters:
        - name: office
          in: path
          description: Office id for the stream location associated with the downstream locations.
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Specifies the name of the stream location whose downstream locations data is to be included in the response.
          required: true
          schema:
            type: string
        - name: all-downstream
          in: query
          description: If true, retrieve all downstream locations.
          schema:
            type: boolean
        - name: same-stream-only
          in: query
          description: If true, retrieve only locations on the same stream.
          schema:
            type: boolean
        - name: station-unit
          in: query
          description: Station units.
          schema:
            type: string
        - name: stage-unit
          in: query
          description: Stage units.
          schema:
            type: string
        - name: area-unit
          in: query
          description: Area units.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=1:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StreamLocation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /cwms-data/stream-locations/{office}/{name}/upstream-locations:
    get:
      tags:
        - StreamLocations
      summary: Get cwmsData streamLocations with office with name upstreamLocations
      description: Returns matching upstream stream locations.
      operationId: getCwmsDataStreamLocationsWithOfficeWithNameUpstreamLocations
      parameters:
        - name: office
          in: path
          description: Office id for the stream location associated with the upstream locations.
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Specifies the name of the stream location whose upstream locations data is to be included in the response.
          required: true
          schema:
            type: string
        - name: all-upstream
          in: query
          description: If true, retrieve all upstream locations.
          schema:
            type: boolean
        - name: same-stream-only
          in: query
          description: If true, retrieve only locations on the same stream.
          schema:
            type: boolean
        - name: station-unit
          in: query
          description: Station units.
          schema:
            type: string
        - name: stage-unit
          in: query
          description: Stage units.
          schema:
            type: string
        - name: area-unit
          in: query
          description: Area units.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=1:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StreamLocation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /cwms-data/stream-locations/{name}:
    get:
      tags:
        - StreamLocations
      summary: Get cwmsData streamLocations with name
      description: Returns CWMS Stream Location Data
      operationId: getCwmsDataStreamLocationsWithName
      parameters:
        - name: name
          in: path
          description: Specifies the location-id of the stream location to be retrieved.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the stream location to be retrieved.
          required: true
          schema:
            type: string
        - name: stream-id
          in: query
          description: Specifies the stream-id of the stream location to be retrieved.
          required: true
          schema:
            type: string
        - name: station-unit
          in: query
          description: Specifies the unit of measure for the station. Default units are mi.
          schema:
            type: string
        - name: stage-unit
          in: query
          description: Specifies the unit of measure for the stage. Default units are ft.
          schema:
            type: string
        - name: area-unit
          in: query
          description: Specifies the unit of measure for the area. Default units are mi2.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=1:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StreamLocation'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StreamLocation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - StreamLocations
      summary: Delete cwmsData streamLocations with name
      description: Delete CWMS Stream Location
      operationId: deleteCwmsDataStreamLocationsWithName
      parameters:
        - name: name
          in: path
          description: Specifies the location-id of the stream location to be deleted.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the stream location to be deleted.
          required: true
          schema:
            type: string
        - name: stream-id
          in: query
          description: Specifies the stream-id of the stream location to be deleted.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Stream Location successfully deleted from CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Stream Location not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - StreamLocations
      summary: Patch cwmsData streamLocations with name
      description: Update CWMS Stream Location
      operationId: patchCwmsDataStreamLocationsWithName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;version=1:
            schema:
              $ref: '#/components/schemas/StreamLocation'
        required: true
      responses:
        '204':
          description: Stream Location successfully updated to CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/stream-locations:
    get:
      tags:
        - StreamLocations
      summary: Get cwmsData streamLocations
      description: Returns matching CWMS Stream Location Data for a Reservoir Project.
      operationId: getCwmsDataStreamLocations
      parameters:
        - name: office-mask
          in: query
          description: Office id for the reservoir project location associated with the stream locations.
          schema:
            type: string
        - name: stream-id-mask
          in: query
          description: Specifies the stream-id of the stream that the returned stream locations belong to.
          schema:
            type: string
        - name: name-mask
          in: query
          description: Specifies the location-id of the stream location to be retrieved.
          schema:
            type: string
        - name: station-unit
          in: query
          description: Specifies the unit of measure for the station. Default units are mi.
          schema:
            type: string
        - name: stage-unit
          in: query
          description: Specifies the unit of measure for the stage. Default units are ft.
          schema:
            type: string
        - name: area-unit
          in: query
          description: Specifies the unit of measure for the area. Default units are mi2.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=1:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StreamLocation'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StreamLocation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - StreamLocations
      summary: Post cwmsData streamLocations
      description: Create CWMS Stream Location
      operationId: postCwmsDataStreamLocations
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=1:
            schema:
              $ref: '#/components/schemas/StreamLocation'
        required: true
      responses:
        '204':
          description: Stream Location successfully stored to CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/stream-reaches/{name}:
    get:
      tags:
        - StreamReaches
      summary: Get cwmsData streamReaches with name
      description: Returns CWMS Stream Reach Data
      operationId: getCwmsDataStreamReachesWithName
      parameters:
        - name: name
          in: path
          description: Specifies the reach-id of the stream reach to be retrieved.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the stream reach to be retrieved.
          required: true
          schema:
            type: string
        - name: stream-id
          in: query
          description: Specifies the stream-id of the stream reach to be retrieved.
          required: true
          schema:
            type: string
        - name: station-unit
          in: query
          description: Specifies the unit of measure for the station. Defaults to mi.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=1:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StreamReach'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StreamReach'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - StreamReaches
      summary: Delete cwmsData streamReaches with name
      description: Delete CWMS Stream Reach
      operationId: deleteCwmsDataStreamReachesWithName
      parameters:
        - name: name
          in: path
          description: Specifies the reach-id of the stream reach to be deleted.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the stream reach to be deleted.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Stream Reach successfully deleted from CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - StreamReaches
      summary: Patch cwmsData streamReaches with name
      description: Rename CWMS Stream Reach
      operationId: patchCwmsDataStreamReachesWithName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: 'Specifies the new reach-id. '
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the stream reach to be renamed.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Stream Reach successfully renamed in CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/stream-reaches:
    get:
      tags:
        - StreamReaches
      summary: Get cwmsData streamReaches
      description: Returns matching CWMS Stream Reach Data for a Reservoir Project.
      operationId: getCwmsDataStreamReaches
      parameters:
        - name: office-mask
          in: query
          description: Office id for the reservoir project location associated with the stream reaches.
          schema:
            type: string
        - name: stream-id-mask
          in: query
          description: Specifies the stream-id mask for the stream reaches.
          schema:
            type: string
        - name: reach-id-mask
          in: query
          description: Specifies the reach-id mask for the stream reaches.
          schema:
            type: string
        - name: configuration-id-mask
          in: query
          description: Specifies the configuration-id mask for the stream reaches.
          schema:
            type: string
        - name: station-unit
          in: query
          description: Specifies the unit of measure for the station. Defaults to mi.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=1:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StreamReach'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StreamReach'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - StreamReaches
      summary: Post cwmsData streamReaches
      description: Create CWMS Stream Reach
      operationId: postCwmsDataStreamReaches
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=1:
            schema:
              $ref: '#/components/schemas/StreamReach'
        required: true
      responses:
        '204':
          description: Stream Reach successfully stored to CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/blobs/{blob-id}:
    get:
      tags:
        - Blob
      summary: Get cwmsData blobs with blobId
      operationId: getCwmsDataBlobsWithBlobId
      parameters:
        - name: blob-id
          in: path
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office.
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /cwms-data/blobs:
    get:
      tags:
        - Blob
      summary: Get cwmsData blobs
      operationId: getCwmsDataBlobs
      parameters:
        - name: office
          in: query
          description: Specifies the owning office. If this field is not specified, matching information from all offices shall be returned.
          schema:
            type: string
        - name: page
          in: query
          description: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
          schema:
            type: string
        - name: page-size
          in: query
          description: How many entries per page returned. Default 20.
          schema:
            type: integer
            format: int32
        - name: like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> describing the blob id's you want
          schema:
            type: string
      responses:
        '200':
          description: A list of blobs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blobs'
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/Blobs'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Blob
      summary: Post cwmsData blobs
      description: Create new Blob
      operationId: postCwmsDataBlobs
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/Blob'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/clobs/{clob-id}:
    get:
      tags:
        - Clob
      summary: Get cwmsData clobs with clobId
      description: Get a single clob.  If the accept header is set to text/plain, the raw value is returned as the response body. Responses to text/plain requests are streamed and support the Range header.  When the accept header is set to application/json;version=2 the clob will be returned as a serialized Clob object with fields for office-id, id, description and value.
      operationId: getCwmsDataClobsWithClobId
      parameters:
        - name: clob-id
          in: path
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office.
          schema:
            type: string
        - name: clob-id
          in: query
          description: 'If this _query_ parameter is provided the id _path_ parameter is ignored and the value of the query parameter is used.   Note: this query parameter is necessary for id''s that contain ''/'' or other special characters.  Because of abuse even properly escaped ''/'' in url paths are blocked.  When using this query parameter a valid path parameter must still be provided for the request to be properly routed.  If your clob id contains ''/'' you can''t specify the clob-id query parameter and also specify the id path parameter because firewall and/or server rules will deny the request even though you are specifying this override. "ignored" is suggested.'
          schema:
            type: string
      responses:
        '200':
          description: Returns requested clob.
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/Clob'
            text/plain:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Clob
      summary: Delete cwmsData clobs with clobId
      description: Delete clob
      operationId: deleteCwmsDataClobsWithClobId
      parameters:
        - name: clob-id
          in: path
          description: Specifies the id of the clob to be deleted
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the office of the clob.
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Clob
      summary: Patch cwmsData clobs with clobId
      description: Update clob
      operationId: patchCwmsDataClobsWithClobId
      parameters:
        - name: clob-id
          in: path
          description: Specifies the id of the clob to be updated
          required: true
          schema:
            type: string
        - name: ignore-nulls
          in: query
          description: 'If true, null and empty fields in the provided clob will be ignored and the existing value of those fields left in place. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/Clob'
          application/xml;version=2:
            schema:
              $ref: '#/components/schemas/Clob'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/clobs:
    get:
      tags:
        - Clob
      summary: Get cwmsData clobs
      operationId: getCwmsDataClobs
      parameters:
        - name: office
          in: query
          description: Specifies the owning office. If this field is not specified, matching information from all offices shall be returned.
          schema:
            type: string
        - name: page
          in: query
          description: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
          schema:
            type: string
        - name: page-size
          in: query
          description: How many entries per page returned. Default 20.
          schema:
            type: integer
            format: int32
        - name: include-values
          in: query
          description: 'Do you want the value associated with this particular clob (default: false)'
          schema:
            type: boolean
        - name: like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> matching against the id
          schema:
            type: string
      responses:
        '200':
          description: A list of clobs.
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/Clobs'
            application/xml;version=2:
              schema:
                $ref: '#/components/schemas/Clobs'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Clob
      summary: Post cwmsData clobs
      description: Create new Clob
      operationId: postCwmsDataClobs
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/Clob'
          application/xml;version=2:
            schema:
              $ref: '#/components/schemas/Clob'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/pools/{pool-id}:
    get:
      tags:
        - Pools
      summary: Get cwmsData pools with poolId
      description: Retrieves requested Pool
      operationId: getCwmsDataPoolsWithPoolId
      parameters:
        - name: pool-id
          in: path
          description: Specifies the pool whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the Pool whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: project-id
          in: query
          description: Specifies the project-id of the Pool whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: bottom-mask
          in: query
          description: Bottom level mask. Default value:*
          schema:
            type: string
        - name: top-mask
          in: query
          description: Top level mask. Default value:*
          schema:
            type: string
        - name: include-explicit
          in: query
          description: Specifies if the results should include explicit Pools. Default value:false
          schema:
            type: string
        - name: include-implicit
          in: query
          description: Specifies if the results should include implicit Pools. Default value:true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/Pool'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the Location Category was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: request format is not implemented
      security: []
  /cwms-data/pools:
    get:
      tags:
        - Pools
      summary: Get cwmsData pools
      description: Returns Pools Data
      operationId: getCwmsDataPools
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the data in the response. If this field is not specified, matching items from all offices shall be returned.
          schema:
            type: string
        - name: id-mask
          in: query
          description: Project Id mask. Default value:*
          schema:
            type: string
        - name: name-mask
          in: query
          description: Name mask. Default value:*
          schema:
            type: string
        - name: bottom-mask
          in: query
          description: Bottom level mask. Default value:*
          schema:
            type: string
        - name: top-mask
          in: query
          description: Top level mask. Default value:*
          schema:
            type: string
        - name: include-explicit
          in: query
          description: Specifies if the results should include explicit Pools. Default value:false
          schema:
            type: string
        - name: include-implicit
          in: query
          description: Specifies if the results should include implicit Pools. Default value:true
          schema:
            type: string
        - name: page
          in: query
          description: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
          schema:
            type: string
        - name: page-size
          in: query
          description: How many entries per page returned. Default 100.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/Pools'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the pools were not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: request format is not implemented
      security: []
  /cwms-data/specified-levels:
    get:
      tags:
        - Levels
      summary: Get cwmsData specifiedLevels
      operationId: getCwmsDataSpecifiedLevels
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the Specified Levels whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
          schema:
            type: string
        - name: template-id-mask
          in: query
          description: Mask that specifies the IDs to be included in the response. If this field is not specified, all specified levels shall be returned.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/SpecifiedLevel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Levels
      summary: Post cwmsData specifiedLevels
      description: Create new SpecifiedLevel
      operationId: postCwmsDataSpecifiedLevels
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/SpecifiedLevel'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/specified-levels/{specified-level-id}:
    delete:
      tags:
        - Levels
      summary: Delete cwmsData specifiedLevels with specifiedLevelId
      description: Deletes requested specified level id
      operationId: deleteCwmsDataSpecifiedLevelsWithSpecifiedLevelId
      parameters:
        - name: specified-level-id
          in: path
          description: The specified level id to be deleted
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the timeseries identifier to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Levels
      summary: Patch cwmsData specifiedLevels with specifiedLevelId
      description: Renames the requested specified level id
      operationId: patchCwmsDataSpecifiedLevelsWithSpecifiedLevelId
      parameters:
        - name: specified-level-id
          in: path
          required: true
          schema:
            type: string
        - name: specified-level-id
          in: query
          description: The new specified level id.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the specified level to be renamed
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/forecast-instance/{name}:
    get:
      tags:
        - Forecast
      summary: Get cwmsData forecastInstance with name
      description: Used to get all forecast instances for a given forecast spec
      operationId: getCwmsDataForecastInstanceWithName
      parameters:
        - name: name
          in: path
          description: Specifies the spec id of the forecast spec whose forecast instance data is to be included in the response.
          required: true
          schema:
            type: string
        - name: forecast-date
          in: query
          description: Specifies the forecast date time of the forecast instance to be retrieved.
          required: true
          schema:
            type: string
        - name: issue-date
          in: query
          description: Specifies the issue date time of the forecast instance to be retrieved.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the forecast spec whose forecast instance is to be included in the response.
          required: true
          schema:
            type: string
        - name: designator
          in: query
          description: Specifies the designator of the forecast spec whose forecast instance data to be included in the response.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of elements of the data set you've selected.
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/ForecastInstance'
        '400':
          description: Invalid parameter combination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: The provided combination of parameters did not find a forecast instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: Requested format is not implemented
      security: []
    delete:
      tags:
        - Forecast
      summary: Delete cwmsData forecastInstance with name
      description: Used to delete forecast instance data based on unique fields
      operationId: deleteCwmsDataForecastInstanceWithName
      parameters:
        - name: name
          in: path
          description: Specifies the spec id of the forecast spec associated with the forecast instanceto be deleted.
          required: true
          schema:
            type: string
        - name: forecast-date
          in: query
          description: Specifies the forecast date time of the forecast instance to be deleted.
          required: true
          schema:
            type: string
        - name: issue-date
          in: query
          description: Specifies the issue date time of the forecast instance to be deleted.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the forecast spec associated with the forecast instance to be deleted.
          required: true
          schema:
            type: string
        - name: designator
          in: query
          description: Specifies the designator of the forecast spec associated with the forecast instance to be deleted.
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: The provided combination of parameters did not find a forecast instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Forecast
      summary: Patch cwmsData forecastInstance with name
      description: Update a forecast instance with new max age, notes, forecast fileand forecast info key/value pairs.
      operationId: patchCwmsDataForecastInstanceWithName
      parameters:
        - name: name
          in: path
          description: Specifies the spec id of the forecast spec to be updated.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/ForecastInstance'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the ForecastInstance was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/forecast-instance:
    get:
      tags:
        - Forecast
      summary: Get cwmsData forecastInstance
      description: Used to get all forecast instances for a given forecast spec
      operationId: getCwmsDataForecastInstance
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the forecast spec whose forecast instance is to be included in the response. Default will be all offices.
          schema:
            type: string
        - name: name
          in: query
          description: Specifies the spec id of the forecast spec whose forecast instance data is to be included in the response. Default will be all names.
          schema:
            type: string
        - name: designator
          in: query
          description: 'Specifies the designator of the forecast spec whose forecast instance data to be included in the response. '
          schema:
            type: string
      responses:
        '200':
          description: A list of elements of the data set you've selected.
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/ForecastInstance'
        '400':
          description: Invalid parameter combination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: Requested format is not implemented
      security: []
    post:
      tags:
        - Forecast
      summary: Post cwmsData forecastInstance
      description: Used to create and save a forecast instance
      operationId: postCwmsDataForecastInstance
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/ForecastInstance'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/forecast-spec/{name}:
    get:
      tags:
        - Forecast
      summary: Get cwmsData forecastSpec with name
      description: Used to query a single forecast spec record
      operationId: getCwmsDataForecastSpecWithName
      parameters:
        - name: name
          in: path
          description: Specifies the spec id of the forecast spec whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the forecast spec whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: designator
          in: query
          description: Specifies the designator of the forecast spec whose data to be included in the response.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns the requested forecast spec
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/ForecastSpec'
        '400':
          description: Invalid parameter combination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: The provided combination of parameters did not find a forecast spec.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: Requested format is not implemented
      security: []
    delete:
      tags:
        - Forecast
      summary: Delete cwmsData forecastSpec with name
      description: Used to delete forecast spec data based on unique fields
      operationId: deleteCwmsDataForecastSpecWithName
      parameters:
        - name: name
          in: path
          description: Specifies the spec id of the forecast spec whose data is to be deleted.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the forecast spec whose data is to be deleted.
          required: true
          schema:
            type: string
        - name: designator
          in: query
          description: Specifies the designator of the forecast spec whose data is to be deleted.
          required: true
          schema:
            type: string
        - name: method
          in: query
          description: Specifies the delete method used. Defaults to "DELETE_KEY"
          schema:
            $ref: '#/components/schemas/DeleteMethod'
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: The provided combination of parameters did not find a forecast spec.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Forecast
      summary: Patch cwmsData forecastSpec with name
      description: Update a forecast spec with provided values
      operationId: patchCwmsDataForecastSpecWithName
      parameters:
        - name: name
          in: path
          description: Forecast spec id to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/ForecastSpec'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the forecast spec was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/forecast-spec:
    get:
      tags:
        - Forecast
      summary: Get cwmsData forecastSpec
      description: Used to query multiple forecast specs
      operationId: getCwmsDataForecastSpec
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the forecast spec whose data is to be included in the response.
          schema:
            type: string
        - name: id-mask
          in: query
          description: Posix <a href="regexp.html">regular expression</a>  that specifies the spec IDs to be included in the response.
          schema:
            type: string
        - name: designator-mask
          in: query
          description: Posix <a href="regexp.html">regular expression</a>  that specifies the designator of the forecast spec whose data to be included in the response.
          schema:
            type: string
        - name: source-entity
          in: query
          description: Specifies the source identity of the forecast spec whose data is to be included in the response.
          schema:
            type: string
      responses:
        '200':
          description: A list of elements of the data set you've selected.
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/ForecastSpec'
        '400':
          description: Invalid parameter combination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: Requested format is not implemented
      security: []
    post:
      tags:
        - Forecast
      summary: Post cwmsData forecastSpec
      description: Used to create and save forecast spec data
      operationId: postCwmsDataForecastSpec
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/ForecastSpec'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/forecast-instance/{name}/file-data:
    get:
      tags:
        - Forecast
      summary: Get cwmsData forecastInstance with name fileData
      description: Used to download forecast file for the given parameters
      operationId: getCwmsDataForecastInstanceWithNameFileData
      parameters:
        - name: name
          in: path
          description: Specifies the spec id of the forecast spec whose forecast instance data is to be included in the response.
          required: true
          schema:
            type: string
        - name: forecast-date
          in: query
          description: Specifies the forecast date time of the forecast instance to be retrieved.
          required: true
          schema:
            type: string
        - name: issue-date
          in: query
          description: Specifies the issue date time of the forecast instance to be retrieved.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the forecast spec whose forecast instance is to be included in the response.
          required: true
          schema:
            type: string
        - name: designator
          in: query
          description: Specifies the designator of the forecast spec whose forecast instance data to be included in the response.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid parameter combination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: The provided combination of parameters did not find a forecast instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: Requested format is not implemented
      security: []
  /cwms-data/projects/embankments/{name}:
    get:
      tags:
        - Embankments
      summary: Get cwmsData projects embankments with name
      description: Returns CWMS Embankment Data
      operationId: getCwmsDataProjectsEmbankmentsWithName
      parameters:
        - name: name
          in: path
          description: Specifies the name of the embankment to be retrieved.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the embankment to be retrieved.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=1:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Embankment'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Embankment'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Embankments
      summary: Delete cwmsData projects embankments with name
      description: Delete CWMS Embankment
      operationId: deleteCwmsDataProjectsEmbankmentsWithName
      parameters:
        - name: name
          in: path
          description: Specifies the name of the embankment to be deleted.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the embankment to be deleted.
          required: true
          schema:
            type: string
        - name: method
          in: query
          description: Specifies the delete method used. Defaults to "DELETE_KEY"
          schema:
            $ref: '#/components/schemas/DeleteMethod'
      responses:
        '204':
          description: Embankment successfully deleted from CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the embankment was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Embankments
      summary: Patch cwmsData projects embankments with name
      description: Rename CWMS Embankment
      operationId: patchCwmsDataProjectsEmbankmentsWithName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: 'Specifies the new embankment name. '
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the embankment to be renamed.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Embankment successfully renamed in CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/projects/embankments:
    get:
      tags:
        - Embankments
      summary: Get cwmsData projects embankments
      description: Returns matching CWMS Embankment Data for a Reservoir Project.
      operationId: getCwmsDataProjectsEmbankments
      parameters:
        - name: office
          in: query
          description: Office id for the reservoir project location associated with the embankments.
          schema:
            type: string
        - name: project-id
          in: query
          description: Specifies the project-id of the Embankments whose data is to be included in the response.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=1:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Embankment'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Embankment'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Embankments
      summary: Post cwmsData projects embankments
      description: Create CWMS Embankment
      operationId: postCwmsDataProjectsEmbankments
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=1:
            schema:
              $ref: '#/components/schemas/Embankment'
        required: true
      responses:
        '204':
          description: Embankment successfully stored to CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/projects/turbines/{name}:
    get:
      tags:
        - Turbines
      summary: Get cwmsData projects turbines with name
      description: Returns CWMS Turbine Data
      operationId: getCwmsDataProjectsTurbinesWithName
      parameters:
        - name: name
          in: path
          description: Specifies the name of the turbine to be retrieved.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the turbine to be retrieved.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=1:
              schema:
                $ref: '#/components/schemas/Turbine'
            application/json:
              schema:
                $ref: '#/components/schemas/Turbine'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Turbines
      summary: Delete cwmsData projects turbines with name
      description: Delete CWMS Turbine
      operationId: deleteCwmsDataProjectsTurbinesWithName
      parameters:
        - name: name
          in: path
          description: Specifies the name of the turbine to be deleted.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the turbine to be deleted.
          required: true
          schema:
            type: string
        - name: method
          in: query
          description: Specifies the delete method used. Defaults to "DELETE_KEY"
          schema:
            $ref: '#/components/schemas/DeleteMethod'
      responses:
        '204':
          description: Turbine successfully deleted from CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the turbine was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Turbines
      summary: Patch cwmsData projects turbines with name
      description: Rename CWMS Turbine
      operationId: patchCwmsDataProjectsTurbinesWithName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: 'Specifies the new turbine name. '
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the turbine to be renamed.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Turbine successfully renamed in to CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/projects/turbines:
    get:
      tags:
        - Turbines
      summary: Get cwmsData projects turbines
      description: Returns matching CWMS Turbine Data for a Reservoir Project.
      operationId: getCwmsDataProjectsTurbines
      parameters:
        - name: office
          in: query
          description: Office id for the reservoir project location associated with the turbines.
          required: true
          schema:
            type: string
        - name: project-id
          in: query
          description: Specifies the project-id of the Turbines whose data is to be included in the response.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=1:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Turbine'
            application/json:
              schema:
                $ref: '#/components/schemas/Turbine'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Turbines
      summary: Post cwmsData projects turbines
      description: Create CWMS Turbine
      operationId: postCwmsDataProjectsTurbines
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=1:
            schema:
              $ref: '#/components/schemas/Turbine'
          application/json:
            schema:
              $ref: '#/components/schemas/Turbine'
        required: true
      responses:
        '204':
          description: Turbine successfully stored to CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/projects/{office}/{name}/turbine-changes:
    get:
      tags:
        - Turbines
      summary: Get cwmsData projects with office with name turbineChanges
      description: Returns matching CWMS Turbine Change Data for a Reservoir Project.
      operationId: getCwmsDataProjectsWithOfficeWithNameTurbineChanges
      parameters:
        - name: office
          in: path
          description: Office id for the reservoir project location associated with the turbine changes.
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Specifies the name of project of the Turbine changes whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: begin
          in: query
          description: The start of the time window
          required: true
          schema:
            type: string
        - name: end
          in: query
          description: The end of the time window.
          required: true
          schema:
            type: string
        - name: start-time-inclusive
          in: query
          description: A flag specifying whether any data at the start time should be retrieved ('True') or only data <b><em>after</em></b> the start time ('False').  Default value is True
          schema:
            type: boolean
        - name: end-time-inclusive
          in: query
          description: A flag ('True'/'False') specifying whether any data at the end time should be retrieved ('True') or only data <b><em>before</em></b> the end time ('False'). Default value is False
          schema:
            type: boolean
        - name: unit-system
          in: query
          description: Unit System desired in response. Can be SI (International Scientific) or EN (Imperial.) If unspecified, defaults to EN.
          schema:
            $ref: '#/components/schemas/UnitSystem'
        - name: page-size
          in: query
          description: the maximum number of turbine changes to retrieve, regardless of time window. A positive integer is interpreted as the maximum number of changes from the beginning of the time window. A negative integer is interpreted as the maximum number from the end of the time window. Default 500.A page cursor will not be returned by this DTO. Instead, the next page can be determined by querying the next set of changes using the last returned change date and using start-time-inclusive=false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json;version=1:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TurbineChange'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Turbines
      summary: Post cwmsData projects with office with name turbineChanges
      description: Create CWMS Turbine Changes
      operationId: postCwmsDataProjectsWithOfficeWithNameTurbineChanges
      parameters:
        - name: office
          in: path
          description: Office id for the reservoir project location associated with the turbine changes.
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Specifies the name of project of the Turbine changes whose data is to stored.
          required: true
          schema:
            type: string
        - name: override-protection
          in: query
          description: A flag ('True'/'False') specifying whether to delete protected data. Default is False
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=1:
            schema:
              $ref: '#/components/schemas/TurbineChange'
          application/json:
            schema:
              $ref: '#/components/schemas/TurbineChange'
        required: true
      responses:
        '204':
          description: Turbine successfully stored to CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Project Id or Turbine location Ids not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    delete:
      tags:
        - Turbines
      summary: Delete cwmsData projects with office with name turbineChanges
      description: Delete CWMS Turbine Changes
      operationId: deleteCwmsDataProjectsWithOfficeWithNameTurbineChanges
      parameters:
        - name: office
          in: path
          description: Specifies the owning office of the project for changes to be deleted.
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Specifies the name of project for the turbine changes to be deleted.
          required: true
          schema:
            type: string
        - name: begin
          in: query
          description: The start of the time window
          required: true
          schema:
            type: string
        - name: end
          in: query
          description: The end of the time window.
          required: true
          schema:
            type: string
        - name: override-protection
          in: query
          description: A flag ('True'/'False') specifying whether to delete protected data. Default is False
          schema:
            type: boolean
      responses:
        '204':
          description: Turbine successfully deleted from CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the project was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/projects/outlets/{name}:
    get:
      tags:
        - Outlets
      summary: Get cwmsData projects outlets with name
      description: Returns CWMS Outlet Data
      operationId: getCwmsDataProjectsOutletsWithName
      parameters:
        - name: name
          in: path
          description: Specifies the location-id of the Outlet to be created.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the outlet to be retrieved.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=1:
              schema:
                $ref: '#/components/schemas/Outlet'
            application/json:
              schema:
                $ref: '#/components/schemas/Outlet'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Outlets
      summary: Delete cwmsData projects outlets with name
      description: Delete CWMS Outlet
      operationId: deleteCwmsDataProjectsOutletsWithName
      parameters:
        - name: name
          in: path
          description: Specifies the location-id of the outlet to be deleted.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the outlet to be deleted.
          required: true
          schema:
            type: string
        - name: method
          in: query
          description: Specifies the delete method used. Defaults to "DELETE_KEY"
          schema:
            $ref: '#/components/schemas/DeleteMethod'
      responses:
        '204':
          description: Outlet successfully deleted from CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the outlet was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Outlets
      summary: Patch cwmsData projects outlets with name
      description: Rename CWMS Outlet
      operationId: patchCwmsDataProjectsOutletsWithName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: Specifies the new outlet location-id.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the outlet to be renamed.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: CWMS Outlet successfully renamed.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/projects/outlets:
    get:
      tags:
        - Outlets
      summary: Get cwmsData projects outlets
      description: Returns matching CWMS Outlet Data for a Reservoir Project.
      operationId: getCwmsDataProjectsOutlets
      parameters:
        - name: office
          in: query
          description: Office id for the reservoir project location associated with the outlets.  Defaults to the user session id.
          schema:
            type: string
        - name: project-id
          in: query
          description: Specifies the project-id of the Outlets whose data is to be included in the response.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=1:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Outlet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Outlet'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Outlets
      summary: Post cwmsData projects outlets
      description: Create CWMS Outlet
      operationId: postCwmsDataProjectsOutlets
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=1:
            schema:
              $ref: '#/components/schemas/Outlet'
          application/json:
            schema:
              $ref: '#/components/schemas/Outlet'
        required: true
      responses:
        '204':
          description: Outlet successfully stored to CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/projects/{office}/{project-id}/virtual-outlets/{name}:
    get:
      tags:
        - Outlets
      summary: Get cwmsData projects with office with projectId virtualOutlets with name
      description: Returns CWMS Virtual Outlet Data
      operationId: getCwmsDataProjectsWithOfficeWithProjectIdVirtualOutletsWithName
      parameters:
        - name: office
          in: path
          description: Specifies the owning office of the virtual outlet to be retrieved.
          required: true
          schema:
            type: string
        - name: project-id
          in: path
          description: Specifies the project-id of the virtual outlets whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Specifies the location-id of the virtual outlet to be created.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=1:
              schema:
                $ref: '#/components/schemas/VirtualOutlet'
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualOutlet'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Outlets
      summary: Delete cwmsData projects with office with projectId virtualOutlets with name
      description: Delete CWMS Virtual Outlet
      operationId: deleteCwmsDataProjectsWithOfficeWithProjectIdVirtualOutletsWithName
      parameters:
        - name: office
          in: path
          description: Specifies the owning office of the virtual outlet to be deleted.
          required: true
          schema:
            type: string
        - name: project-id
          in: path
          description: Specifies the project id of the virtual outlet to be deleted.
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Specifies the location id of the virtual outlet to be deleted
          required: true
          schema:
            type: string
        - name: method
          in: query
          description: Specifies the delete method used. Defaults to "DELETE_KEY"
          schema:
            $ref: '#/components/schemas/DeleteMethod'
      responses:
        '204':
          description: Virtual Outlet successfully deleted from CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the virtual outlet was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/projects/{office}/{project-id}/virtual-outlets:
    get:
      tags:
        - Outlets
      summary: Get cwmsData projects with office with projectId virtualOutlets
      description: Returns matching CWMS Virtual Outlet Data for a Reservoir Project.
      operationId: getCwmsDataProjectsWithOfficeWithProjectIdVirtualOutlets
      parameters:
        - name: office
          in: path
          description: Office id for the reservoir project location associated with the virtual outlets.  Defaults to the user session id.
          required: true
          schema:
            type: string
        - name: project-id
          in: path
          description: Specifies the project-id of the virtual outlets whose data is to be included in the response.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=1:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VirtualOutlet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VirtualOutlet'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /cwms-data/projects/virtual-outlets:
    post:
      tags:
        - Outlets
      summary: Post cwmsData projects virtualOutlets
      description: Create CWMS Virtual Outlet
      operationId: postCwmsDataProjectsVirtualOutlets
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=1:
            schema:
              $ref: '#/components/schemas/VirtualOutlet'
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualOutlet'
        required: true
      responses:
        '204':
          description: Virtual Outlet successfully stored to CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/projects/{name}:
    get:
      tags:
        - Projects
      summary: Get cwmsData projects with name
      description: Retrieves requested Project
      operationId: getCwmsDataProjectsWithName
      parameters:
        - name: name
          in: path
          description: Specifies the project to be included in the response.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the Project whose data is to be included in the response.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=1:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the Project was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: request format is not implemented
      security: []
    delete:
      tags:
        - Projects
      summary: Delete cwmsData projects with name
      description: Deletes requested reservoir project
      operationId: deleteCwmsDataProjectsWithName
      parameters:
        - name: name
          in: path
          description: The project identifier to be deleted
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the project to be deleted
          required: true
          schema:
            type: string
        - name: method
          in: query
          description: Specifies the delete method used. Defaults to "DELETE_KEY"
          schema:
            $ref: '#/components/schemas/DeleteMethod'
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Projects
      summary: Patch cwmsData projects with name
      description: Updates a project
      operationId: patchCwmsDataProjectsWithName
      parameters:
        - name: name
          in: path
          description: The id of the project to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
          application/json;version=1:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/projects:
    get:
      tags:
        - Projects
      summary: Get cwmsData projects
      description: Returns Projects Data
      operationId: getCwmsDataProjects
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the data in the response. If this field is not specified, matching items from all offices shall be returned.
          schema:
            type: string
        - name: id-mask
          in: query
          description: Project Id mask.
          schema:
            type: string
        - name: page
          in: query
          description: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
          schema:
            type: string
        - name: page-size
          in: query
          description: How many entries per page returned. Default 100.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the projects were not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: request format is not implemented
      security: []
    post:
      tags:
        - Projects
      summary: Post cwmsData projects
      description: Create new Project
      operationId: postCwmsDataProjects
      requestBody:
        content:
          application/json;version=1:
            schema:
              $ref: '#/components/schemas/Project'
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/properties/{name}:
    get:
      tags:
        - Properties
      summary: Get cwmsData properties with name
      description: Returns CWMS Property Data
      operationId: getCwmsDataPropertiesWithName
      parameters:
        - name: name
          in: path
          description: Specifies the name of the property to be retrieved.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the property to be retrieved.
          required: true
          schema:
            type: string
        - name: category-id
          in: query
          description: Specifies the category id of the property to be retrieved.
          required: true
          schema:
            type: string
        - name: default-value
          in: query
          description: Specifies the default value if the property does not exist.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Properties
      summary: Delete cwmsData properties with name
      description: Delete CWMS Property
      operationId: deleteCwmsDataPropertiesWithName
      parameters:
        - name: name
          in: path
          description: Specifies the name of the property to be deleted.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the property to be deleted.
          required: true
          schema:
            type: string
        - name: category-id
          in: query
          description: Specifies the category id of the property to be deleted.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Property successfully deleted from CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the property was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Properties
      summary: Patch cwmsData properties with name
      description: Update CWMS Property
      operationId: patchCwmsDataPropertiesWithName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
        required: true
      responses:
        '204':
          description: Property successfully stored to CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/properties:
    get:
      tags:
        - Properties
      summary: Get cwmsData properties
      description: Returns matching CWMS Property Data.
      operationId: getCwmsDataProperties
      parameters:
        - name: office-mask
          in: query
          description: Filters properties to the specified office mask
          schema:
            type: string
        - name: category-id
          in: query
          description: Filters properties to the specified category mask
          schema:
            type: string
        - name: name-mask
          in: query
          description: Filters properties to the specified name mask
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Property'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Properties
      summary: Post cwmsData properties
      description: Create CWMS Property
      operationId: postCwmsDataProperties
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
        required: true
      responses:
        '204':
          description: Property successfully stored to CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/lookup-types:
    get:
      tags:
        - LookupTypes
      summary: Get cwmsData lookupTypes
      description: Returns matching CWMS Lookup Type Data.
      operationId: getCwmsDataLookupTypes
      parameters:
        - name: category
          in: query
          description: Filters lookup types to the specified category
          required: true
          schema:
            type: string
        - name: prefix
          in: query
          description: Filters lookup types to the specified prefix
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Filters lookup types to the specified office ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LookupType'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - LookupTypes
      summary: Post cwmsData lookupTypes
      description: Create CWMS Lookup Type
      operationId: postCwmsDataLookupTypes
      parameters:
        - name: category
          in: query
          description: Specifies the category id of the lookup type to be created.
          required: true
          schema:
            type: string
        - name: prefix
          in: query
          description: Specifies the prefix of the lookup type to be created.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupType'
        required: true
      responses:
        '204':
          description: Lookup Type successfully stored to CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /cwms-data/lookup-types/{name}:
    delete:
      tags:
        - LookupTypes
      summary: Delete cwmsData lookupTypes with name
      description: Delete CWMS Lookup Type
      operationId: deleteCwmsDataLookupTypesWithName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: category
          in: query
          description: Specifies the category id of the lookup type to be deleted.
          required: true
          schema:
            type: string
        - name: prefix
          in: query
          description: Specifies the prefix of the lookup type to be deleted.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the lookup type to be deleted.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Lookup Type successfully deleted from CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the lookup type was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - LookupTypes
      summary: Patch cwmsData lookupTypes with name
      description: Update CWMS Lookup Type
      operationId: patchCwmsDataLookupTypesWithName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: category
          in: query
          description: Specifies the category id of the lookup type to be updated.
          required: true
          schema:
            type: string
        - name: prefix
          in: query
          description: Specifies the prefix of the lookup type to be updated.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupType'
        required: true
      responses:
        '204':
          description: Lookup Type successfully stored to CWMS.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
components:
  schemas:
    CdaError:
      type: object
      properties:
        message:
          type: string
        incidentIdentifier:
          type: string
          description: A randomly generated number to help identify your request in the logs for analysis..
        details:
          type: object
          additionalProperties:
            type: object
    ApiKey:
      required:
        - key-name
        - user-id
      type: object
      properties:
        user-id:
          type: string
        key-name:
          type: string
        api-key:
          type: string
        created:
          type: string
          description: The instant this Key was created, in ISO-8601 format with offset and timezone ('yyyy-MM-dd'T'HH:mm:ssZ'['VV']'')
          format: date-time
          readOnly: true
        expires:
          type: string
          description: When this key expires, in ISO-8601 format with offset and timezone ('yyyy-MM-dd'T'HH:mm:ssZ'['VV']'')
          format: date-time
    location_category:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
        description:
          type: string
      description: A representation of a location category
    LocationCategory:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
        description:
          type: string
      description: A representation of a location category
    AssignedLocation:
      type: object
      properties:
        locationId:
          type: string
        officeId:
          type: string
        aliasId:
          type: string
        attribute:
          type: number
        refLocationId:
          type: string
    location_group:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
        location-category:
          $ref: '#/components/schemas/location_category'
        description:
          type: string
        shared-loc-alias-id:
          type: string
        shared-ref-location-id:
          type: string
        loc-group-attribute:
          type: number
        assigned-locations:
          type: array
          items:
            $ref: '#/components/schemas/AssignedLocation'
      description: A representation of a location group
    LocationGroup:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
        location-category:
          $ref: '#/components/schemas/location_category'
        description:
          type: string
        shared-loc-alias-id:
          type: string
        shared-ref-location-id:
          type: string
        loc-group-attribute:
          type: number
        assigned-locations:
          type: array
          items:
            $ref: '#/components/schemas/AssignedLocation'
      description: A representation of a location group
    LocationGroup_CSV:
      type: object
      description: Single LocationGroup or List of LocationGroups in comma separated format
      example: "#LocationGroup Id, OfficeId, Description, CategoryId, CategoryOfficeId, SharedLocAliasId, SharedRefLocationId, LocGroupAttribute\r\nCERL,Construction Engineering Research Laboratory,Field Operating Activity\tERD\r\nCHL,Coastal and Hydraulics Laboratory,Field Operating Activity\tERD\r\nNAB,Baltimore District,District,NAD\r\nNAD,North Atlantic Division,Division Headquarters,HQ"
    CsvV1LocationGroup:
      type: object
      description: Single LocationGroup or List of LocationGroups in comma separated format
      example: "#LocationGroup Id, OfficeId, Description, CategoryId, CategoryOfficeId, SharedLocAliasId, SharedRefLocationId, LocGroupAttribute\r\nCERL,Construction Engineering Research Laboratory,Field Operating Activity\tERD\r\nCHL,Coastal and Hydraulics Laboratory,Field Operating Activity\tERD\r\nNAB,Baltimore District,District,NAD\r\nNAD,North Atlantic Division,Division Headquarters,HQ"
    Unit:
      type: object
    Location:
      required:
        - name
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        name:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        active:
          type: boolean
        public-name:
          type: string
        long-name:
          type: string
        description:
          type: string
        timezone-name:
          type: string
        location-type:
          type: string
        location-kind:
          type: string
        nation:
          type: string
          enum:
            - US
            - CANADA
            - MEXICO
        state-initial:
          type: string
        county-name:
          type: string
        nearest-city:
          type: string
        horizontal-datum:
          type: string
        published-longitude:
          type: number
          format: double
        published-latitude:
          type: number
          format: double
        vertical-datum:
          type: string
        elevation:
          type: number
          format: double
        map-label:
          type: string
        bounding-office-id:
          type: string
        elevation-units:
          type: string
    state:
      required:
        - name
        - state-initial
      type: object
      properties:
        state-initial:
          type: string
        name:
          type: string
      description: A representation of a state
    State:
      required:
        - name
        - state-initial
      type: object
      properties:
        state-initial:
          type: string
        name:
          type: string
      description: A representation of a state
    county:
      required:
        - county-id
        - name
        - state-initial
      type: object
      properties:
        name:
          type: string
        county-id:
          type: string
        state-initial:
          type: string
      description: A representation of a county
    County:
      required:
        - county-id
        - name
        - state-initial
      type: object
      properties:
        name:
          type: string
        county-id:
          type: string
        state-initial:
          type: string
      description: A representation of a county
    OfficeFormatV1:
      type: object
      properties:
        offices:
          $ref: '#/components/schemas/OfficesFMT'
    OfficesFMT:
      type: object
      properties:
        offices:
          type: array
          items:
            $ref: '#/components/schemas/office'
    office:
      type: object
      properties:
        name:
          type: string
        long-name:
          type: string
        type:
          type: string
          enum:
            - unknown
            - corps headquarters
            - division headquarters
            - division regional
            - district
            - filed operating activity
        reports-to:
          type: string
          description: Reference to another office, like a division, that this office reports to.
      description: A representation of a CWMS office
    Office:
      type: object
      properties:
        name:
          type: string
        long-name:
          type: string
        type:
          type: string
          enum:
            - unknown
            - corps headquarters
            - division headquarters
            - division regional
            - district
            - filed operating activity
        reports-to:
          type: string
          description: Reference to another office, like a division, that this office reports to.
      description: A representation of a CWMS office
    LocationLevel:
      required:
        - location-level-id
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        location-level-id:
          type: string
          description: Name of the location level
        seasonal-time-series-id:
          type: string
          description: Timeseries ID (e.g. from the times series catalog) to use as the location level. Mutually exclusive with seasonalValues and siParameterUnitsConstantValue
        specified-level-id:
          type: string
          description: Generic name of this location level. Common names are 'Top of Dam', 'Streambed', 'Bottom of Dam'.
        parameter-type-id:
          type: string
          description: To indicate if single or aggregate value
          enum:
            - Inst
            - Ave
            - Min
            - Max
            - Total
        parameter-id:
          type: string
          description: Data Type such as Stage, Elevation, or others.
        constant-value:
          type: number
          description: Single value for this location level. Mutually exclusive with seasonableTimeSeriesId and seasonValues.
          format: double
        level-units-id:
          type: string
          description: Units the provided levels are in
        level-date:
          type: string
          description: The date/time at which this location level configuration takes effect.
          format: date-time
        level-comment:
          type: string
        interval-origin:
          type: string
          description: The start point of provided seasonal values
          format: date-time
        interval-months:
          type: integer
          format: int32
        interval-minutes:
          type: integer
          format: int32
        interpolate-string:
          type: string
          description: Indicating whether or not to interpolate between seasonal values.
          enum:
            - T
            - F
        duration-id:
          type: string
          description: 0 if parameterTypeId is Inst. Otherwise duration indicating the time window of the aggregate value.
        attribute-value:
          type: number
        attribute-units-id:
          type: string
        attribute-parameter-type-id:
          type: string
        attribute-parameter-id:
          type: string
        attribute-duration-id:
          type: string
        attribute-comment:
          type: string
        seasonal-values:
          type: array
          description: List of Repeating seasonal values. The values repeater after the specified interval. A yearly interval seasonable could have 12 different values, one for each month for example. Mutually exclusive with seasonalTimeSeriesId and siParameterUnitsConstantValue
          items:
            $ref: '#/components/schemas/SeasonalValueBean'
    SeasonalValueBean:
      type: object
      properties:
        value:
          type: number
          format: double
        offset-months:
          type: integer
          format: int32
        offset-minutes:
          type: integer
      description: List of Repeating seasonal values. The values repeater after the specified interval. A yearly interval seasonable could have 12 different values, one for each month for example. Mutually exclusive with seasonalTimeSeriesId and siParameterUnitsConstantValue
    location-levels:
      type: object
      properties:
        levels:
          type: array
          description: List of retrieved location levels
          items:
            $ref: '#/components/schemas/LocationLevel'
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
    LocationLevels:
      type: object
      properties:
        levels:
          type: array
          description: List of retrieved location levels
          items:
            $ref: '#/components/schemas/LocationLevel'
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
    Offset:
      type: object
      properties:
        estimate:
          type: boolean
        to-datum:
          type: string
        value:
          type: number
          format: double
    TimeSeries.Column:
      type: object
      properties:
        name:
          type: string
        ordinal:
          type: integer
          format: int32
        datatype:
          type: string
      readOnly: true
    TimeSeries.Record:
      type: object
      properties:
        date-time:
          type: integer
          description: Milliseconds since 1970-01-01 (Unix Epoch), always UTC
          format: int64
        value:
          type: number
          description: Requested time-series data value
          format: double
        quality-code:
          type: integer
          format: int32
      description: List of retrieved time-series values
    timeseries:
      required:
        - units
      type: object
      properties:
        begin:
          type: string
          description: The requested start time of the data, in ISO-8601 format with offset and timezone ('yyyy-MM-dd'T'HH:mm:ssZ'['VV']'')
          format: date-time
          readOnly: true
        date-version-type:
          type: string
          description: Version type specifies the type of timeseries response to be received. Can be max aggregate or single version. Max aggregate cannot be run if version date field is specified.
          enum:
            - MAX_AGGREGATE
            - SINGLE_VERSION
            - UNVERSIONED
        end:
          type: string
          description: The requested end time of the data, in ISO-8601 format with offset and timezone ('yyyy-MM-dd'T'HH:mm:ssZ'['VV']'')
          format: date-time
          readOnly: true
        interval:
          type: object
          properties:
            seconds:
              type: integer
              format: int64
            zero:
              type: boolean
            nano:
              type: integer
              format: int32
            negative:
              type: boolean
            positive:
              type: boolean
            units:
              type: array
              items:
                type: object
                properties:
                  durationEstimated:
                    type: boolean
                  duration:
                    type: object
                    properties:
                      seconds:
                        type: integer
                        format: int64
                      zero:
                        type: boolean
                      nano:
                        type: integer
                        format: int32
                      negative:
                        type: boolean
                      positive:
                        type: boolean
                  timeBased:
                    type: boolean
                  dateBased:
                    type: boolean
          description: The interval of the time-series, in ISO-8601 duration format
          format: Java Duration
          readOnly: true
        interval-offset:
          type: integer
          description: Offset from top of interval
          format: int64
          readOnly: true
        name:
          type: string
          description: Time-series name
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        office-id:
          type: string
          description: Office ID that owns the time-series
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
        time-zone:
          type: string
          description: Only on 21.1.1 Database. The timezone the Interval Offset is from.
          readOnly: true
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
        units:
          type: string
          description: The units of the time series data
        value-columns:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/TimeSeries.Column'
        values:
          type: array
          items:
            type: array
            example:
              - 1509654000000
              - 54.3
              - 0
            items:
              type: object
              properties:
                date-time:
                  type: integer
                  description: Milliseconds since 1970-01-01 (Unix Epoch), always UTC
                  format: int64
                value:
                  type: number
                  description: Requested time-series data value
                  format: double
                quality-code:
                  type: integer
                  format: int32
              description: List of retrieved time-series values
        version-date:
          type: string
          description: The version date of the time series trace
          format: date-time
        vertical-datum-info:
          $ref: '#/components/schemas/vertical-datum-info'
    vertical-datum-info:
      type: object
      properties:
        office:
          type: string
        unit:
          type: string
        location:
          type: string
        native-datum:
          type: string
        elevation:
          type: number
          format: double
        offsets:
          type: array
          items:
            $ref: '#/components/schemas/Offset'
    TimeSeries:
      required:
        - units
      type: object
      properties:
        begin:
          type: string
          description: The requested start time of the data, in ISO-8601 format with offset and timezone ('yyyy-MM-dd'T'HH:mm:ssZ'['VV']'')
          format: date-time
          readOnly: true
        date-version-type:
          type: string
          description: Version type specifies the type of timeseries response to be received. Can be max aggregate or single version. Max aggregate cannot be run if version date field is specified.
          enum:
            - MAX_AGGREGATE
            - SINGLE_VERSION
            - UNVERSIONED
        end:
          type: string
          description: The requested end time of the data, in ISO-8601 format with offset and timezone ('yyyy-MM-dd'T'HH:mm:ssZ'['VV']'')
          format: date-time
          readOnly: true
        interval:
          type: object
          properties:
            seconds:
              type: integer
              format: int64
            zero:
              type: boolean
            nano:
              type: integer
              format: int32
            negative:
              type: boolean
            positive:
              type: boolean
            units:
              type: array
              items:
                type: object
                properties:
                  durationEstimated:
                    type: boolean
                  duration:
                    type: object
                    properties:
                      seconds:
                        type: integer
                        format: int64
                      zero:
                        type: boolean
                      nano:
                        type: integer
                        format: int32
                      negative:
                        type: boolean
                      positive:
                        type: boolean
                  timeBased:
                    type: boolean
                  dateBased:
                    type: boolean
          description: The interval of the time-series, in ISO-8601 duration format
          format: Java Duration
          readOnly: true
        interval-offset:
          type: integer
          description: Offset from top of interval
          format: int64
          readOnly: true
        name:
          type: string
          description: Time-series name
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        office-id:
          type: string
          description: Office ID that owns the time-series
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
        time-zone:
          type: string
          description: Only on 21.1.1 Database. The timezone the Interval Offset is from.
          readOnly: true
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
        units:
          type: string
          description: The units of the time series data
        value-columns:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/TimeSeries.Column'
        values:
          type: array
          items:
            type: array
            example:
              - 1509654000000
              - 54.3
              - 0
            items:
              type: object
              properties:
                date-time:
                  type: integer
                  description: Milliseconds since 1970-01-01 (Unix Epoch), always UTC
                  format: int64
                value:
                  type: number
                  description: Requested time-series data value
                  format: double
                quality-code:
                  type: integer
                  format: int32
              description: List of retrieved time-series values
        version-date:
          type: string
          description: The version date of the time series trace
          format: date-time
        vertical-datum-info:
          $ref: '#/components/schemas/vertical-datum-info'
    UnitSystem:
      type: string
      description: Unit System desired in response. Can be SI (International Scientific) or EN (Imperial.) If unspecified, defaults to SI.
      enum:
        - SI
        - EN
    Tsv:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/TsvId'
        value:
          type: number
          format: double
        qualityCode:
          type: integer
          format: int64
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
    TsvId:
      type: object
      properties:
        tsCode:
          type: integer
          format: int64
        dateTime:
          type: string
          format: date-time
        versionDate:
          type: string
          format: date-time
        dataEntryDate:
          type: string
          format: date-time
    StandardTextId:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
    StandardTextValue:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/StandardTextId'
        standard-text:
          type: string
    StandardTextCatalog:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/StandardTextValue'
    DeleteMethod:
      type: string
      enum:
        - DELETE_ALL
        - DELETE_KEY
        - DELETE_DATA
    RegularTextTimeSeriesRow:
      type: object
      properties:
        date-time:
          type: string
          format: date-time
        data-entry-date:
          type: string
          format: date-time
        text-value:
          type: string
        filename:
          type: string
        media-type:
          type: string
        quality-code:
          type: integer
          format: int64
        dest-flag:
          type: integer
          format: int32
        value-url:
          type: string
    TextTimeSeries:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        name:
          type: string
        interval-offset:
          type: integer
          format: int64
        time-zone:
          type: string
        date-version-type:
          type: string
          description: Version type specifies the type of timeseries response to be received. Can be max aggregate or single version. Max aggregate cannot be run if version date field is specified.
          enum:
            - MAX_AGGREGATE
            - SINGLE_VERSION
            - UNVERSIONED
        version-date:
          type: string
          description: The version date of the time series trace
          format: date-time
        regular-text-values:
          type: array
          items:
            $ref: '#/components/schemas/RegularTextTimeSeriesRow'
    BinaryTimeSeries:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        name:
          type: string
        interval-offset:
          type: integer
          format: int64
        time-zone:
          type: string
        date-version-type:
          type: string
          description: Version type specifies the type of timeseries response to be received. Can be max aggregate or single version. Max aggregate cannot be run if version date field is specified.
          enum:
            - MAX_AGGREGATE
            - SINGLE_VERSION
            - UNVERSIONED
        version-date:
          type: string
          description: The version date of the time series trace
          format: date-time
        binary-values:
          type: array
          items:
            $ref: '#/components/schemas/BinaryTimeSeriesRow'
    BinaryTimeSeriesRow:
      type: object
      properties:
        date-time:
          type: string
          format: date-time
        data-entry-date:
          type: string
          format: date-time
        media-type:
          type: string
        filename:
          type: string
        dest-flag:
          type: integer
          format: int32
        binary-value:
          type: array
          items:
            type: string
            format: byte
        value-url:
          type: string
        quality-code:
          type: integer
          format: int64
    timeseries-category:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
        description:
          type: string
      description: A representation of a TimeSeries category
    TimeSeriesCategory:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
        description:
          type: string
      description: A representation of a TimeSeries category
    TimeSeriesIdentifierDescriptor:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        time-series-id:
          type: string
        timezone-name:
          type: string
        interval-offset-minutes:
          type: integer
          format: int64
        active:
          type: boolean
    TimeSeriesIdentifierDescriptors:
      type: object
      properties:
        descriptors:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesIdentifierDescriptor'
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
    AssignedTimeSeries:
      type: object
      properties:
        officeId:
          type: string
        timeseriesId:
          type: string
        tsCode:
          type: number
        aliasId:
          type: string
        refTsId:
          type: string
        attribute:
          type: integer
          format: int32
    timeseries-group:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
        time-series-category:
          $ref: '#/components/schemas/timeseries-category'
        description:
          type: string
        shared-alias-id:
          type: string
        shared-ref-ts-id:
          type: string
        assigned-time-series:
          type: array
          items:
            $ref: '#/components/schemas/AssignedTimeSeries'
      description: A representation of a timeseries group
    TimeSeriesGroup:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
        time-series-category:
          $ref: '#/components/schemas/timeseries-category'
        description:
          type: string
        shared-alias-id:
          type: string
        shared-ref-ts-id:
          type: string
        assigned-time-series:
          type: array
          items:
            $ref: '#/components/schemas/AssignedTimeSeries'
      description: A representation of a timeseries group
    StoreRule:
      type: string
      enum:
        - REPLACE ALL
        - DO NOT REPLACE
        - REPLACE MISSING VALUES ONLY
        - REPLACE WITH NON MISSING
        - DELETE INSERT
    ParameterSpec:
      type: object
      properties:
        parameter:
          type: string
        in-range-method:
          type: string
        out-range-low-method:
          type: string
        out-range-high-method:
          type: string
    RatingTemplate:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
        version:
          type: string
        description:
          type: string
        dependent-parameter:
          type: string
        independent-parameter-specs:
          type: array
          items:
            $ref: '#/components/schemas/ParameterSpec'
        rating-ids:
          type: array
          items:
            type: string
    RatingTemplates:
      type: object
      properties:
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
        templates:
          type: array
          items:
            $ref: '#/components/schemas/RatingTemplate'
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
    IndependentRoundingSpec:
      type: object
      properties:
        position:
          type: integer
          format: int32
        value:
          type: string
    RatingSpec:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        rating-id:
          type: string
        template-id:
          type: string
        location-id:
          type: string
        version:
          type: string
        source-agency:
          type: string
        in-range-method:
          type: string
        out-range-low-method:
          type: string
        out-range-high-method:
          type: string
        active:
          type: boolean
        auto-update:
          type: boolean
        auto-activate:
          type: boolean
        auto-migrate-extension:
          type: boolean
        independent-rounding-specs:
          type: array
          items:
            $ref: '#/components/schemas/IndependentRoundingSpec'
        dependent-rounding-spec:
          type: string
        description:
          type: string
        effective-dates:
          type: array
          items:
            type: string
            format: date-time
    RatingSpecs:
      type: object
      properties:
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
        specs:
          type: array
          items:
            $ref: '#/components/schemas/RatingSpec'
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
    AbstractRatingMetadata:
      type: object
      properties:
        office-id:
          type: string
        rating-spec-id:
          type: string
        units-id:
          type: string
        active:
          type: boolean
        effective-date:
          type: string
          format: date-time
        create-date:
          type: string
          format: date-time
        transition-date:
          type: string
          format: date-time
        description:
          type: string
        vertical-datum-info:
          $ref: '#/components/schemas/vertical-datum-info'
        rating-type:
          type: string
      description: Rating Metadata
      discriminator:
        propertyName: rating-type
        mapping:
          table: '#/components/schemas/TableRating'
          transitional: '#/components/schemas/TransitionalRating'
          virtual: '#/components/schemas/VirtualRating'
          expression-rating: '#/components/schemas/ExpressionRating'
          usgs: '#/components/schemas/UsgsStreamRating'
      oneOf:
        - $ref: '#/components/schemas/TableRating'
        - $ref: '#/components/schemas/TransitionalRating'
        - $ref: '#/components/schemas/VirtualRating'
        - $ref: '#/components/schemas/ExpressionRating'
        - $ref: '#/components/schemas/UsgsStreamRating'
    ExpressionRating:
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractRatingMetadata'
        - type: object
          properties:
            expression:
              type: string
    RatingMetadata:
      type: object
      properties:
        rating-spec:
          $ref: '#/components/schemas/RatingSpec'
        ratings:
          type: array
          items:
            $ref: '#/components/schemas/AbstractRatingMetadata'
    RatingMetadataList:
      type: object
      properties:
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
        rating-metadata:
          type: array
          items:
            $ref: '#/components/schemas/RatingMetadata'
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
    SourceRating:
      type: object
    TableRating:
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractRatingMetadata'
        - type: object
          properties:
            in-range-method:
              type: string
            out-range-low-method:
              type: string
            out-range-high-method:
              type: string
    TransitionalRating:
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractRatingMetadata'
        - type: object
          properties:
            source-ratings:
              type: array
              items:
                type: string
            conditions:
              type: array
              items:
                type: string
            evaluations:
              type: array
              items:
                type: string
    UsgsStreamRating:
      type: object
      allOf:
        - $ref: '#/components/schemas/TableRating'
    VirtualRating:
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractRatingMetadata'
        - type: object
          properties:
            source-ratings:
              type: array
              items:
                $ref: '#/components/schemas/SourceRating'
            connections:
              type: string
    DatabaseLoadMethod:
      type: string
      enum:
        - EAGER
        - LAZY
        - REFERENCE
    CatalogableEndpoint:
      type: string
      description: Set of data for which a larger catalog can be built.
      enum:
        - TIMESERIES
        - LOCATIONS
    CatalogEntry:
      type: object
      properties:
        office:
          type: string
      oneOf:
        - $ref: '#/components/schemas/LocationCatalogEntry'
        - $ref: '#/components/schemas/TimeseriesCatalogEntry'
    LocationCatalogEntry:
      type: object
      properties:
        office:
          type: string
        name:
          type: string
        nearest-city:
          type: string
        public-name:
          type: string
        long-name:
          type: string
        description:
          type: string
        kind:
          type: string
        type:
          type: string
        time-zone:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        published-latitude:
          type: number
          format: double
        published-longitude:
          type: number
          format: double
        horizontal-datum:
          type: string
        elevation:
          type: number
          format: double
        unit:
          type: string
        vertical-datum:
          type: string
        nation:
          type: string
        state:
          type: string
        county:
          type: string
        bounding-office:
          type: string
        map-label:
          type: string
        active:
          type: boolean
        aliases:
          type: array
          items:
            $ref: '#/components/schemas/alias'
    TimeseriesCatalogEntry:
      type: object
      properties:
        office:
          type: string
        name:
          type: string
        units:
          type: string
        interval:
          type: string
        interval-offset:
          type: integer
          description: Offset from top of interval
          format: int64
        time-zone:
          type: string
          description: Only on 21.1.1 Database. The timezone the Interval Offset is from.
        extents:
          type: array
          items:
            $ref: '#/components/schemas/extents'
    alias:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    catalog:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/CatalogEntry'
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
    extents:
      type: object
      properties:
        earliest-time:
          type: string
          description: Earliest value in the timeseries
          format: date-time
        last-update:
          type: string
          description: Last update in the timeseries
          format: date-time
        latest-time:
          type: string
          description: Latest value in the timeseries
          format: date-time
        version-time:
          type: string
          description: TimeSeries version to which this extent information applies
          format: date-time
      description: TimeSeries extent information
    Catalog:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/CatalogEntry'
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
    Basin:
      required:
        - basin-id
      type: object
      properties:
        basin-id:
          $ref: '#/components/schemas/CwmsId'
        sort-order:
          type: number
          format: double
        total-drainage-area:
          type: number
          format: double
        contributing-drainage-area:
          type: number
          format: double
        parent-basin-id:
          $ref: '#/components/schemas/CwmsId'
        area-unit:
          type: string
        primary-stream-id:
          $ref: '#/components/schemas/CwmsId'
    Stream:
      required:
        - id
      type: object
      properties:
        starts-downstream:
          type: boolean
        flows-into-stream-node:
          $ref: '#/components/schemas/StreamNode'
        diverts-from-stream-node:
          $ref: '#/components/schemas/StreamNode'
        length:
          type: number
          format: double
        average-slope:
          type: number
          format: double
        length-units:
          type: string
        slope-units:
          type: string
        comment:
          type: string
        id:
          $ref: '#/components/schemas/CwmsId'
    StreamLocation:
      required:
        - stream-location-node
      type: object
      properties:
        stream-location-node:
          $ref: '#/components/schemas/StreamLocationNode'
        published-station:
          type: number
          format: double
        navigation-station:
          type: number
          format: double
        lowest-measurable-stage:
          type: number
          format: double
        total-drainage-area:
          type: number
          format: double
        ungaged-drainage-area:
          type: number
          format: double
        area-units:
          type: string
        stage-units:
          type: string
    StreamReach:
      required:
        - downstream-node
        - id
        - stream-id
        - upstream-node
      type: object
      properties:
        comment:
          type: string
        downstream-node:
          $ref: '#/components/schemas/StreamLocationNode'
        upstream-node:
          $ref: '#/components/schemas/StreamLocationNode'
        configuration-id:
          $ref: '#/components/schemas/CwmsId'
        stream-id:
          $ref: '#/components/schemas/CwmsId'
        id:
          $ref: '#/components/schemas/CwmsId'
    CwmsId:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        name:
          type: string
    StreamNode:
      required:
        - stream-id
      type: object
      properties:
        stream-id:
          $ref: '#/components/schemas/CwmsId'
        bank:
          type: string
          enum:
            - L
            - R
        station:
          type: number
          format: double
        station-units:
          type: string
    StreamLocationNode:
      required:
        - id
        - stream-node
      type: object
      properties:
        id:
          $ref: '#/components/schemas/CwmsId'
        stream-node:
          $ref: '#/components/schemas/StreamNode'
    Blob:
      required:
        - id
        - office-id
        - value
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
        description:
          type: string
        media-type-id:
          type: string
        value:
          type: array
          items:
            type: string
            format: byte
    blobs:
      type: object
      properties:
        blobs:
          type: array
          description: List of retrieved blobs
          items:
            $ref: '#/components/schemas/Blob'
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
    Blobs:
      type: object
      properties:
        blobs:
          type: array
          description: List of retrieved blobs
          items:
            $ref: '#/components/schemas/Blob'
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
    clob:
      required:
        - id
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
        description:
          type: string
        value:
          type: string
    Clob:
      required:
        - id
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
        description:
          type: string
        value:
          type: string
    clobs:
      type: object
      properties:
        clobs:
          type: array
          description: List of retrieved clobs
          items:
            $ref: '#/components/schemas/clob'
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
    Clobs:
      type: object
      properties:
        clobs:
          type: array
          description: List of retrieved clobs
          items:
            $ref: '#/components/schemas/clob'
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
    Pool:
      type: object
      properties:
        poolName:
          $ref: '#/components/schemas/PoolNameType'
        projectId:
          type: string
        bottomLevelId:
          type: string
        topLevelId:
          type: string
        implicit:
          type: boolean
        attribute:
          type: number
        description:
          type: string
        clobText:
          type: string
      description: List of retrieved pools
    PoolNameType:
      type: object
      properties:
        poolName:
          type: string
        officeId:
          type: string
    pools:
      type: object
      properties:
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
        pools:
          type: array
          description: List of retrieved pools
          items:
            $ref: '#/components/schemas/Pool'
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
    Pools:
      type: object
      properties:
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
        pools:
          type: array
          description: List of retrieved pools
          items:
            $ref: '#/components/schemas/Pool'
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
    SpecifiedLevel:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
        description:
          type: string
    forecast-instance:
      type: object
      properties:
        spec:
          $ref: '#/components/schemas/forecast-spec'
        date-time:
          type: string
          format: date-time
        issue-date-time:
          type: string
          format: date-time
        first-date-time:
          type: string
          format: date-time
        last-date-time:
          type: string
          format: date-time
        max-age:
          type: integer
          format: int32
        notes:
          type: string
          description: Forecast Instance Notes
        metadata:
          type: object
          additionalProperties:
            type: string
        filename:
          type: string
          description: Forecast Filename
        file-description:
          type: string
          description: Description of Forecast File
        file-media-type:
          type: string
          description: Forecast File Media Type
        file-data:
          type: array
          description: Forecast File binary data
          items:
            type: string
            description: Forecast File binary data
            format: byte
        file-data-url:
          type: string
          description: Link to Forecast File binary data
    forecast-spec:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        spec-id:
          type: string
          description: Forecast Spec ID
        designator:
          type: string
          description: Forecast Designator
        location-id:
          type: string
          description: Location IDs
        source-entity-id:
          type: string
          description: Source Entity ID
        description:
          type: string
          description: Description of Forecast
        time-series-ids:
          type: array
          description: List of Time Series IDs belonging to this Forecast Spec
          items:
            type: string
            description: List of Time Series IDs belonging to this Forecast Spec
    ForecastInstance:
      type: object
      properties:
        spec:
          $ref: '#/components/schemas/forecast-spec'
        date-time:
          type: string
          format: date-time
        issue-date-time:
          type: string
          format: date-time
        first-date-time:
          type: string
          format: date-time
        last-date-time:
          type: string
          format: date-time
        max-age:
          type: integer
          format: int32
        notes:
          type: string
          description: Forecast Instance Notes
        metadata:
          type: object
          additionalProperties:
            type: string
        filename:
          type: string
          description: Forecast Filename
        file-description:
          type: string
          description: Description of Forecast File
        file-media-type:
          type: string
          description: Forecast File Media Type
        file-data:
          type: array
          description: Forecast File binary data
          items:
            type: string
            description: Forecast File binary data
            format: byte
        file-data-url:
          type: string
          description: Link to Forecast File binary data
    ForecastSpec:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        spec-id:
          type: string
          description: Forecast Spec ID
        designator:
          type: string
          description: Forecast Designator
        location-id:
          type: string
          description: Location IDs
        source-entity-id:
          type: string
          description: Source Entity ID
        description:
          type: string
          description: Description of Forecast
        time-series-ids:
          type: array
          description: List of Time Series IDs belonging to this Forecast Spec
          items:
            type: string
            description: List of Time Series IDs belonging to this Forecast Spec
    Embankment:
      required:
        - location
        - project-id
      type: object
      properties:
        project-id:
          $ref: '#/components/schemas/CwmsId'
        location:
          $ref: '#/components/schemas/Location'
        structure-type:
          $ref: '#/components/schemas/LookupType'
        upstream-side-slope:
          type: number
          format: double
        downstream-side-slope:
          type: number
          format: double
        structure-length:
          type: number
          format: double
        max-height:
          type: number
          format: double
        top-width:
          type: number
          format: double
        length-units:
          type: string
        downstream-protection-type:
          $ref: '#/components/schemas/LookupType'
        upstream-protection-type:
          $ref: '#/components/schemas/LookupType'
    LookupType:
      required:
        - display-value
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        display-value:
          type: string
        tooltip:
          type: string
        active:
          type: boolean
    Turbine:
      required:
        - location
        - project-id
      type: object
      properties:
        project-id:
          $ref: '#/components/schemas/CwmsId'
        location:
          $ref: '#/components/schemas/Location'
    TurbineChange:
      required:
        - change-date
        - discharge-computation-type
        - project-id
        - reason-type
      type: object
      properties:
        project-id:
          $ref: '#/components/schemas/CwmsId'
        change-date:
          type: string
          format: date-time
        protected:
          type: boolean
        discharge-computation-type:
          $ref: '#/components/schemas/LookupType'
        reason-type:
          $ref: '#/components/schemas/LookupType'
        notes:
          type: string
        new-total-discharge-override:
          type: number
          format: double
        old-total-discharge-override:
          type: number
          format: double
        discharge-units:
          type: string
        pool-elevation:
          type: number
          format: double
        tailwater-elevation:
          type: number
          format: double
        elevation-units:
          type: string
        settings:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/TurbineSetting'
    TurbineSetting:
      required:
        - discharge-units
        - generation-units
        - location-id
        - new-discharge
        - old-discharge
      type: object
      properties:
        location-id:
          $ref: '#/components/schemas/CwmsId'
        discharge-units:
          type: string
        old-discharge:
          type: number
          format: double
        new-discharge:
          type: number
          format: double
        generation-units:
          type: string
        scheduled-load:
          type: number
          format: double
        real-power:
          type: number
          format: double
    Outlet:
      required:
        - location
        - project-id
      type: object
      properties:
        project-id:
          $ref: '#/components/schemas/CwmsId'
        location:
          $ref: '#/components/schemas/Location'
        rating-group-id:
          $ref: '#/components/schemas/CwmsId'
        rating-category-id:
          $ref: '#/components/schemas/CwmsId'
    VirtualOutlet:
      required:
        - project-id
        - virtual-outlet-id
      type: object
      properties:
        project-id:
          $ref: '#/components/schemas/CwmsId'
        virtual-outlet-id:
          $ref: '#/components/schemas/CwmsId'
        virtual-records:
          type: array
          items:
            $ref: '#/components/schemas/VirtualOutletRecord'
    VirtualOutletRecord:
      required:
        - outlet-id
      type: object
      properties:
        outlet-id:
          $ref: '#/components/schemas/CwmsId'
        downstream-outlet-ids:
          type: array
          items:
            $ref: '#/components/schemas/CwmsId'
    Project:
      type: object
      properties:
        location:
          $ref: '#/components/schemas/Location'
        federal-cost:
          type: number
        non-federal-cost:
          type: number
        cost-year:
          type: string
          format: date-time
        cost-unit:
          type: string
        federal-o-and-m-cost:
          type: number
        non-federal-o-and-m-cost:
          type: number
        authorizing-law:
          type: string
        project-owner:
          type: string
        hydropower-desc:
          type: string
        sedimentation-desc:
          type: string
        downstream-urban-desc:
          type: string
        bank-full-capacity-desc:
          type: string
        pump-back-location:
          $ref: '#/components/schemas/Location'
        near-gage-location:
          $ref: '#/components/schemas/Location'
        yield-time-frame-start:
          type: string
          format: date-time
        yield-time-frame-end:
          type: string
          format: date-time
        project-remarks:
          type: string
    Projects:
      type: object
      properties:
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
    property:
      required:
        - category
        - name
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        category:
          type: string
        name:
          type: string
        value:
          type: string
        comment:
          type: string
    Property:
      required:
        - category
        - name
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        category:
          type: string
        name:
          type: string
        value:
          type: string
        comment:
          type: string
  securitySchemes:
    CwmsAAACacAuth:
      type: apiKey
      description: Auth handler running on same tomcat instance as the data api.
      name: JSESSIONIDSSO
      in: cookie
    ApiKey:
      type: apiKey
      description: 'Key value as generated from the /auth/keys endpoint. NOTE: you MUST manually prefix your key with ''apikey '' (without the single quotes).'
      name: Authorization
      in: header
      scheme: apikey
