openapi: 3.0.1
info:
  title: CWMS Data API
  description: CWMS REST API for Data Retrieval
  version: '3.0'
paths:
  /swt-data:
    get:
      summary: Get swtData
      operationId: getSwtData
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /swt-data/auth/keys/{key-name}:
    get:
      tags:
        - Authorization
      summary: Get swtData auth keys with keyName
      description: View specific key
      operationId: getSwtDataAuthKeysWithKeyName
      parameters:
        - name: key-name
          in: path
          description: 'Name of the specific key to get more information for. NOTE: Case-sensitive.'
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    delete:
      tags:
        - Authorization
      summary: Delete swtData auth keys with keyName
      description: Delete API key for a user
      operationId: deleteSwtDataAuthKeysWithKeyName
      parameters:
        - name: key-name
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/auth/keys:
    get:
      tags:
        - Authorization
      summary: Get swtData auth keys
      description: View all keys for the current user
      operationId: getSwtDataAuthKeys
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    post:
      tags:
        - Authorization
      summary: Post swtData auth keys
      description: Create a new API Key for user. The randomly generated key is returned to the caller. A provided key will be ignored.
      operationId: postSwtDataAuthKeys
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKey'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/location/category/{category-id}:
    get:
      tags:
        - Location Categories
      summary: Get swtData location category with categoryId
      description: Retrieves requested Location Category
      operationId: getSwtDataLocationCategoryWithCategoryId
      parameters:
        - name: category-id
          in: path
          description: Specifies the Category whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the Location Category whose data is to be included in the response.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationCategory'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Location Categories
      summary: Delete swtData location category with categoryId
      description: Deletes requested location category
      operationId: deleteSwtDataLocationCategoryWithCategoryId
      parameters:
        - name: category-id
          in: path
          description: The location category to be deleted
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the location category to be deleted
          required: true
          schema:
            type: string
        - name: cascade-delete
          in: query
          description: 'Specifies whether to delete any location groups in this location category. Default: false'
          schema:
            type: boolean
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/location/category:
    get:
      tags:
        - Location Categories
      summary: Get swtData location category
      description: Returns CWMS Location Category Data
      operationId: getSwtDataLocationCategory
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the location category(ies) whose data is to be included in the response. If this field is not specified, matching location category information from all offices shall be returned.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationCategory'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Location Categories
      summary: Post swtData location category
      description: Create new LocationCategory
      operationId: postSwtDataLocationCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationCategory'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/location/group/{group-id}:
    get:
      tags:
        - Location Groups
      summary: Get swtData location group with groupId
      description: Retrieves requested Location Group
      operationId: getSwtDataLocationGroupWithGroupId
      parameters:
        - name: group-id
          in: path
          description: Specifies the location_group whose data is to be included in the response
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the location group whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: category-id
          in: query
          description: Specifies the category containing the location group whose data is to be included in the response.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationGroup'
            text/csv:
              schema:
                $ref: '#/components/schemas/CsvV1LocationGroup'
            application/geo+json:
              schema:
                $ref: '#/components/schemas/Unit'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Location Groups
      summary: Delete swtData location group with groupId
      description: Deletes requested location group
      operationId: deleteSwtDataLocationGroupWithGroupId
      parameters:
        - name: group-id
          in: path
          description: The location group to be deleted
          required: true
          schema:
            type: string
        - name: category-id
          in: query
          description: Specifies the location category of the location group to be deleted
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the location group to be deleted
          required: true
          schema:
            type: string
        - name: cascade-delete
          in: query
          description: 'Specifies whether to specifies whether to unassign any location assignments. Default: false'
          schema:
            type: boolean
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Location Groups
      summary: Patch swtData location group with groupId
      description: Update existing LocationGroup
      operationId: patchSwtDataLocationGroupWithGroupId
      parameters:
        - name: group-id
          in: path
          required: true
          schema:
            type: string
        - name: replace-assigned-locs
          in: query
          description: 'Specifies whether to unassign all existing locations before assigning new locations specified in the content body Default: false'
          schema:
            type: boolean
        - name: office
          in: query
          description: Specifies the owning office of the location group to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationGroup'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/location/group:
    get:
      tags:
        - Location Groups
      summary: Get swtData location group
      description: Returns CWMS Location Groups Data
      operationId: getSwtDataLocationGroup
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the location group(s) whose data is to be included in the response. If this field is not specified, matching location groups information from all offices shall be returned.
          schema:
            type: string
        - name: include-assigned
          in: query
          description: 'Include the assigned locations in the returned location groups. (default: false)'
          schema:
            type: boolean
        - name: location-category-like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> matching against the location category id
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationGroup'
            text/csv:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CsvV1LocationGroup'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Location Groups
      summary: Post swtData location group
      description: Create new LocationGroup
      operationId: postSwtDataLocationGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationGroup'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/locations/{location-id}:
    get:
      tags:
        - Locations
      summary: Get swtData locations with locationId
      description: Returns CWMS Location Data
      operationId: getSwtDataLocationsWithLocationId
      parameters:
        - name: location-id
          in: path
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the location level(s) whose data is to be included in the response. If this field is not specified, matching location level information from all offices shall be returned.
          required: true
          schema:
            type: string
        - name: unit
          in: query
          description: "Specifies the unit or unit system of the response. Valid values for the unit field are:\r\n 1. EN.   Specifies English unit system.  Location values will be in the default English units for their parameters.\r\n2. SI.   Specifies the SI unit system.  Location values will be in the default SI units for their parameters.\r\n3. Other. Any unit returned in the response to the units URI request that is appropriate for the requested parameters."
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/Location'
            application/xml;version=2:
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the location was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Locations
      summary: Delete swtData locations with locationId
      description: Delete CWMS Location
      operationId: deleteSwtDataLocationsWithLocationId
      parameters:
        - name: location-id
          in: path
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the location whose data is to be deleted. If this field is not specified, matching location information will be deleted from all offices.
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the location was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Locations
      summary: Patch swtData locations with locationId
      description: Update CWMS Location
      operationId: patchSwtDataLocationsWithLocationId
      parameters:
        - name: location-id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
          application/xml:
            schema:
              $ref: '#/components/schemas/Location'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the location was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/locations:
    get:
      tags:
        - Locations
      summary: Get swtData locations
      description: Returns CWMS Location Data
      operationId: getSwtDataLocations
      parameters:
        - name: names
          in: query
          description: Specifies the name(s) of the location(s) whose data is to be included in the response
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the location level(s) whose data is to be included in the response. If this field is not specified, matching location level information from all offices shall be returned.
          schema:
            type: string
        - name: unit
          in: query
          description: "Specifies the unit or unit system of the response. Valid values for the unit field are:\r\n 1. EN.   Specifies English unit system.  Location level values will be in the default English units for their parameters.\r\n2. SI.   Specifies the SI unit system.  Location level values will be in the default SI units for their parameters.\r\n3. Other. Any unit returned in the response to the units URI request that is appropriate for the requested parameters."
          schema:
            type: string
        - name: datum
          in: query
          description: "Specifies the elevation datum of the response. This field affects only elevation location levels. Valid values for this field are:\r\n1. NAVD88.  The elevation values will in the specified or default units above the NAVD-88 datum.\r\n2. NGVD29.  The elevation values will be in the specified or default units above the NGVD-29 datum."
          schema:
            type: string
        - name: format
          in: query
          description: "Specifies the encoding format of the response. Valid values for the format field for this URI are:\r\n1.    tab\r\n2.    csv\r\n3.    xml\r\n4.  wml2 (only if name field is specified)\r\n5.    json (default)\n6.    geojson"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
            text/tab-separated-values:
              schema:
                type: string
            text/csv:
              schema:
                type: string
            application/xml:
              schema:
                $ref: '#/components/schemas/Unit'
            application/vnd.opengis.waterml+xml:
              schema:
                $ref: '#/components/schemas/Unit'
            application/geo+json:
              schema:
                $ref: '#/components/schemas/Unit'
            '':
              schema:
                $ref: '#/components/schemas/Unit'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Locations
      summary: Post swtData locations
      description: Create new CWMS Location
      operationId: postSwtDataLocations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
          application/xml:
            schema:
              $ref: '#/components/schemas/Location'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/states:
    get:
      tags:
        - States
      summary: Get swtData states
      operationId: getSwtDataStates
      responses:
        '200':
          description: A list of states.
          content:
            application/json;version=2:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/State'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /swt-data/counties:
    get:
      tags:
        - Counties
      summary: Get swtData counties
      operationId: getSwtDataCounties
      responses:
        '200':
          description: A list of counties.
          content:
            application/json;version=2:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/County'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /swt-data/offices/{office}:
    get:
      tags:
        - Offices
      summary: Get swtData offices with office
      operationId: getSwtDataOfficesWithOffice
      parameters:
        - name: office
          in: path
          description: The 3 letter office ID you want more information for
          required: true
          schema:
            type: string
        - name: format
          in: query
          description: "(Deprecated in favor of Accept header) Specifies the encoding format of the response. Valid value for the format field for this URI are:\r\n1. tab\r\n2. csv\r\n 3. xml\r\n4. json (default)"
          deprecated: true
          schema:
            type: string
      responses:
        '200':
          description: A list of offices.
          content:
            '':
              schema:
                $ref: '#/components/schemas/OfficeFormatV1'
            application/json;version=2:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Office'
            application/json:
              schema:
                $ref: '#/components/schemas/OfficeFormatV1'
            text/tab-separated-values:
              schema:
                $ref: '#/components/schemas/TabV1Office'
            text/csv:
              schema:
                $ref: '#/components/schemas/CsvV1Office'
            application/xml:
              schema:
                $ref: '#/components/schemas/CsvV1Office'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /swt-data/offices:
    get:
      tags:
        - Offices
      summary: Get swtData offices
      operationId: getSwtDataOffices
      parameters:
        - name: format
          in: query
          description: "(Deprecated in favor of Accept header) Specifies the encoding format of the response. Valid value for the format field for this URI are:\r\n1. tab\r\n2. csv\r\n 3. xml\r\n4. json (default)"
          deprecated: true
          schema:
            type: string
        - name: has-data
          in: query
          description: 'A flag (''True''/''False'') When set to true this returns offices that have operational data. Default value is <b>False</b>,. <a href="https://github.com/USACE/cwms-data-api/issues/321" target="_blank">Feature #321</a>'
          schema:
            type: boolean
      responses:
        '200':
          description: A list of offices.
          content:
            '':
              schema:
                $ref: '#/components/schemas/OfficeFormatV1'
            application/json;version=2:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Office'
            application/json:
              schema:
                $ref: '#/components/schemas/OfficeFormatV1'
            text/tab-separated-values:
              schema:
                $ref: '#/components/schemas/TabV1Office'
            text/csv:
              schema:
                $ref: '#/components/schemas/CsvV1Office'
            application/xml:
              schema:
                $ref: '#/components/schemas/CsvV1Office'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /swt-data/units:
    get:
      tags:
        - Units
      summary: Get swtData units
      operationId: getSwtDataUnits
      parameters:
        - name: format
          in: query
          description: "Specifies the encoding format of the response. Valid value for the format field for this URI are:\r\n1. tab\r\n2. csv\r\n 3. xml\r\n4. json (default)"
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: The format requested is not implemented
      security: []
  /swt-data/parameters:
    get:
      tags:
        - Parameters
      summary: Get swtData parameters
      operationId: getSwtDataParameters
      parameters:
        - name: format
          in: query
          description: "Specifies the encoding format of the response. Valid value for the format field for this URI are:\r\n1. tab\r\n2. csv\r\n 3. xml\r\n4. json (default)"
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /swt-data/timezones:
    get:
      tags:
        - TimeZones
      summary: Get swtData timezones
      operationId: getSwtDataTimezones
      parameters:
        - name: format
          in: query
          description: "Specifies the encoding format of the response. Valid value for the format field for this URI are:\r\n1. tab\r\n2. csv\r\n 3. xml\r\n4. json (default)"
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: The format requested is not implemented
      security: []
  /swt-data/levels/{level-id}:
    get:
      tags:
        - Levels
      summary: Get swtData levels with levelId
      description: Retrieves requested Location Level
      operationId: getSwtDataLevelsWithLevelId
      parameters:
        - name: level-id
          in: path
          description: Specifies the requested location level.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the office of the Location Level to be returned
          required: true
          schema:
            type: string
        - name: effective-date
          in: query
          description: Specifies the effective date of Location Level to be returned
          required: true
          schema:
            type: string
        - name: timezone
          in: query
          description: Specifies the time zone of the values of the effective date field (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
        - name: unit
          in: query
          description: Desired unit for the values retrieved.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/LocationLevel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Levels
      summary: Delete swtData levels with levelId
      description: Delete CWMS Location Level
      operationId: deleteSwtDataLevelsWithLevelId
      parameters:
        - name: level-id
          in: path
          description: Specifies the location level id of the Location Level to be deleted
          required: true
          schema:
            type: string
        - name: cascade-delete
          in: query
          schema:
            type: boolean
        - name: office
          in: query
          description: Specifies the owning office of the location level whose data is to be deleted. If this field is not specified, matching location level information will be deleted from all offices.
          schema:
            type: string
        - name: effective-date
          in: query
          description: Specifies the effective date of the level to be deleted. If not provided will delete all data and reference to the location level.
          schema:
            type: string
        - name: timezone
          in: query
          description: Specifies the time zone of the value of the effective date field (unless otherwise specified).If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Levels
      summary: Patch swtData levels with levelId
      description: Update CWMS Location Level
      operationId: patchSwtDataLevelsWithLevelId
      parameters:
        - name: level-id
          in: path
          description: Specifies the location level id of the Location Level to be updated
          required: true
          schema:
            type: string
        - name: effective-date
          in: query
          description: Specifies the effective date of Location Level that will be updated
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationLevel'
          application/xml:
            schema:
              $ref: '#/components/schemas/LocationLevel'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/levels:
    get:
      tags:
        - Levels
      summary: Get swtData levels
      operationId: getSwtDataLevels
      parameters:
        - name: level-id-mask
          in: query
          description: Specifies the name(s) of the location level(s) whose data is to be included in the response. Uses * for all.
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the location level(s) whose data is to be included in the response. If this field is not specified, matching location level information from all offices shall be returned.
          schema:
            type: string
        - name: unit
          in: query
          description: "Specifies the unit or unit system of the response. Valid values for the unit field are:\r\n 1. EN.   Specifies English unit system.  Location level values will be in the default English units for their parameters.\r\n2. SI.   Specifies the SI unit system.  Location level values will be in the default SI units for their parameters.\r\n3. Other. Any unit returned in the response to the units URI request that is appropriate for the requested parameters."
          schema:
            type: string
        - name: datum
          in: query
          description: "Specifies the elevation datum of the response. This field affects only elevation location levels. Valid values for this field are:\r\n1. NAVD88.  The elevation values will in the specified or default units above the NAVD-88 datum.\r\n2. NGVD29.  The elevation values will be in the specified or default units above the NGVD-29 datum."
          schema:
            type: string
        - name: begin
          in: query
          description: Specifies the start of the time window for data to be included in the response. If this field is not specified, any required time window begins 24 hours prior to the specified or default end time.
          schema:
            type: string
        - name: end
          in: query
          description: Specifies the end of the time window for data to be included in the response. If this field is not specified, any required time window ends at the current time
          schema:
            type: string
        - name: timezone
          in: query
          description: Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
        - name: format
          in: query
          description: "Specifies the encoding format of the response. Requests specifying an Accept header:application/json;version=2 must not include this field. Valid format field values for this URI are:\r\n1.    tab\r\n2.    csv\r\n3.    xml\r\n4.    wml2 (only if name field is specified)\r\n5.    json (default)\r\n"
          schema:
            type: string
        - name: page
          in: query
          description: This identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
          schema:
            type: string
        - name: page-size
          in: query
          description: How many entries per page returned. Default 100.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
            '':
              schema:
                $ref: '#/components/schemas/Unit'
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/LocationLevels'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Levels
      summary: Post swtData levels
      description: Create new CWMS Location Level
      operationId: postSwtDataLevels
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationLevel'
          application/xml:
            schema:
              $ref: '#/components/schemas/LocationLevel'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/levels/{level-id}/timeseries:
    get:
      summary: Get swtData levels with levelId timeseries
      operationId: getSwtDataLevelsWithLevelIdTimeseries
      parameters:
        - name: level-id
          in: path
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /swt-data/timeseries/recent/{group-id}:
    get:
      summary: Get swtData timeseries recent with groupId
      operationId: getSwtDataTimeseriesRecentWithGroupId
      parameters:
        - name: group-id
          in: path
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /swt-data/timeseries/text/standard-text-id/{standard-text-id}:
    get:
      tags:
        - Text-TimeSeries
      summary: Get swtData timeseries text standardTextId with standardTextId
      description: Retrieve a single Standard Text value
      operationId: getSwtDataTimeseriesTextStandardTextIdWithStandardTextId
      parameters:
        - name: standard-text-id
          in: path
          description: Specifies the text id of the standard text to retrieve. Default includes all text ids
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of thestandard text. Default includes all offices
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/StandardTextValue'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Text-TimeSeries
      summary: Delete swtData timeseries text standardTextId with standardTextId
      description: Delete a single Standard Text value
      operationId: deleteSwtDataTimeseriesTextStandardTextIdWithStandardTextId
      parameters:
        - name: standard-text-id
          in: path
          description: Specifies the text id of the standard text to delete
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of thestandard text.
          required: true
          schema:
            type: string
        - name: method
          in: query
          description: Specifies the delete method used.
          required: true
          schema:
            $ref: '#/components/schemas/DeleteMethod'
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/timeseries/text/standard-text-id:
    get:
      tags:
        - Text-TimeSeries
      summary: Get swtData timeseries text standardTextId
      description: Retrieve a Standard Text catalog
      operationId: getSwtDataTimeseriesTextStandardTextId
      parameters:
        - name: office-mask
          in: query
          description: Specifies the office filter of thestandard text.
          schema:
            type: string
        - name: standard-text-id-mask
          in: query
          description: Specifies the text id filter of the standard text
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/StandardTextCatalog'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Text-TimeSeries
      summary: Post swtData timeseries text standardTextId
      description: Create new Standard Text
      operationId: postSwtDataTimeseriesTextStandardTextId
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/StandardTextValue'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/timeseries/text:
    get:
      tags:
        - Text-TimeSeries
      summary: Get swtData timeseries text
      operationId: getSwtDataTimeseriesText
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the Text TimeSeries whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: Specifies the ts-id of the text timeseries
          required: true
          schema:
            type: string
        - name: timezone
          in: query
          description: Specifies the time zone of the values of the begin and end fields (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
        - name: begin
          in: query
          description: The start of the time window
          required: true
          schema:
            type: string
        - name: end
          in: query
          description: The end of the time window.
          required: true
          schema:
            type: string
        - name: version-date
          in: query
          description: The version date for the time series.  If not specified, the maximum version date is used.
          schema:
            type: string
        - name: min-attribute
          in: query
          description: The minimum attribute value to retrieve. If not specified, no minimum value is used.
          schema:
            type: integer
            format: int64
        - name: max-attribute
          in: query
          description: The maximum attribute value to retrieve. If not specified, no maximum value is used.
          schema:
            type: integer
            format: int64
        - name: mode
          in: query
          description: |-
            Type of Text TimeSeries to retrieve.<table>
            <tr><td>ALL</td><td>Retrieve Standard and Regular text timeseries.</td></tr>
            <tr><td>STANDARD</td><td>Retrieve Standard text timeseries.</td></tr>
            <tr><td>REGULAR</td><td>Retrieve Regular text timeseries.</td></tr>
            </table>
          required: true
          schema:
            $ref: '#/components/schemas/TimeSeriesTextMode'
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/TextTimeSeries'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Text-TimeSeries
      summary: Post swtData timeseries text
      description: Create new TextTimeSeries
      operationId: postSwtDataTimeseriesText
      parameters:
        - name: replace-all
          in: query
          description: Whether to replace any and all existing text with the specified text. Default is false
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/TextTimeSeries'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/timeseries/text/{timeseries}:
    delete:
      tags:
        - Text-TimeSeries
      summary: Delete swtData timeseries text with timeseries
      description: Deletes requested text timeseries id
      operationId: deleteSwtDataTimeseriesTextWithTimeseries
      parameters:
        - name: timeseries
          in: path
          description: The time series identifier to be deleted
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the timeseries identifier to be deleted
          required: true
          schema:
            type: string
        - name: text-mask
          in: query
          description: The standard text pattern to match. Use glob-style wildcard characters instead of sql-style wildcard characters for pattern matching.  For StandardTextTimeSeries this should be the Standard_Text_Id (such as 'E' for ESTIMATED)
          required: true
          schema:
            type: string
        - name: mode
          in: query
          description: |-
            Type of delete to perform. 
            <table>
            <tr><td>ALL</td><td>Delete Standard and Regular text timeseries values for the specified time series.</td></tr>
            <tr><td>STANDARD</td><td>Delete Standard text time series for the specified text timeseries.</td></tr>
            <tr><td>REGULAR</td><td>Delete Regular text timeseries values for the specified time series.</td></tr>
            </table>
          required: true
          schema:
            $ref: '#/components/schemas/TimeSeriesTextMode'
        - name: timezone
          in: query
          description: Specifies the time zone of the values of the begin and end fields (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
        - name: begin
          in: query
          description: The start of the time window
          required: true
          schema:
            type: string
        - name: end
          in: query
          description: The end of the time window.
          required: true
          schema:
            type: string
        - name: version-date
          in: query
          description: The version date for the time series.  If not specified, maximum version date is used.
          schema:
            type: string
        - name: min-attribute
          in: query
          description: The minimum attribute value to delete. If not specified, no minimum value is used.
          schema:
            type: integer
            format: int64
        - name: max-attribute
          in: query
          description: The maximum attribute value to delete. If not specified, no maximum value is used.
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Text-TimeSeries
      summary: Patch swtData timeseries text with timeseries
      description: Updates a text timeseries
      operationId: patchSwtDataTimeseriesTextWithTimeseries
      parameters:
        - name: timeseries
          in: path
          description: The id of the text timeseries to be updated
          required: true
          schema:
            type: string
        - name: replace-all
          in: query
          description: Whether to replace any and all existing text with the specified text. Default is:true
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/TextTimeSeries'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/timeseries/binary:
    get:
      tags:
        - Binary-TimeSeries
      summary: Get swtData timeseries binary
      operationId: getSwtDataTimeseriesBinary
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the Binary TimeSeries whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: Specifies the id of the binary timeseries
          required: true
          schema:
            type: string
        - name: binary-type-mask
          in: query
          description: The data type pattern expressed as either an internet media type (e.g. 'image/*') or a file extension (e.g. '.*'). Use glob-style wildcard characters as shown above instead of sql-style wildcard characters for pattern matching. Default is:*
          schema:
            type: string
        - name: timezone
          in: query
          description: Specifies the time zone of the values of the begin and end fields (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
        - name: begin
          in: query
          description: The start of the time window
          required: true
          schema:
            type: string
        - name: end
          in: query
          description: The end of the time window
          required: true
          schema:
            type: string
        - name: version-date
          in: query
          description: The version date for the time series.  If not specified, the maximum version date is used.
          schema:
            type: string
        - name: min-attribute
          in: query
          description: The minimum attribute value. If not specified, no minimum value is used.
          schema:
            type: integer
            format: int64
        - name: max-attribute
          in: query
          description: The maximum attribute value. If not specified, no maximum value is used.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/BinaryTimeSeries'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Binary-TimeSeries
      summary: Post swtData timeseries binary
      description: Create new BinaryTimeSeries
      operationId: postSwtDataTimeseriesBinary
      parameters:
        - name: replace-all
          in: query
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/BinaryTimeSeries'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/timeseries/binary/{timeseries}:
    delete:
      tags:
        - Binary-TimeSeries
      summary: Delete swtData timeseries binary with timeseries
      description: Deletes requested binary timeseries id
      operationId: deleteSwtDataTimeseriesBinaryWithTimeseries
      parameters:
        - name: timeseries
          in: path
          description: The time series identifier to be deleted
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the timeseries identifier to be deleted
          required: true
          schema:
            type: string
        - name: binary-type-mask
          in: query
          description: The data type pattern expressed as either an internet media type (e.g. 'image/*') or a file extension (e.g. '.*'). Use glob-style wildcard characters as shown above instead of sql-style wildcard characters for pattern matching. Default:*
          schema:
            type: string
        - name: timezone
          in: query
          description: Specifies the time zone of the values of the begin and end fields (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
        - name: begin
          in: query
          description: The start of the time window
          required: true
          schema:
            type: string
        - name: end
          in: query
          description: 'The end of the time window. '
          required: true
          schema:
            type: string
        - name: version-date
          in: query
          description: The version date for the time series.  If not specified, the minimum or maximum version date (depending on p_max_version) is used.
          schema:
            type: string
        - name: min-attribute
          in: query
          description: The minimum attribute value to delete. If not specified, no minimum value is used.
          schema:
            type: integer
            format: int64
        - name: max-attribute
          in: query
          description: The maximum attribute value to delete. If not specified, no maximum value is used.
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Binary-TimeSeries
      summary: Patch swtData timeseries binary with timeseries
      description: Updates a binary timeseries
      operationId: patchSwtDataTimeseriesBinaryWithTimeseries
      parameters:
        - name: timeseries
          in: path
          description: The id of the binary timeseries to be updated
          required: true
          schema:
            type: string
        - name: replace-all
          in: query
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/BinaryTimeSeries'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/timeseries/category/{category-id}:
    get:
      tags:
        - TimeSeries Categories
      summary: Get swtData timeseries category with categoryId
      description: Retrieves requested timeseries category
      operationId: getSwtDataTimeseriesCategoryWithCategoryId
      parameters:
        - name: category-id
          in: path
          description: Specifies the Category whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the timeseries category whose data is to be included in the response.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSeriesCategory'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the timeseries category was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: request format is not implemented
      security: []
    delete:
      tags:
        - TimeSeries Categories
      summary: Delete swtData timeseries category with categoryId
      description: Deletes requested time series category
      operationId: deleteSwtDataTimeseriesCategoryWithCategoryId
      parameters:
        - name: category-id
          in: path
          description: The time series category to be deleted
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the time series category to be deleted
          required: true
          schema:
            type: string
        - name: cascade-delete
          in: query
          description: 'Specifies whether to delete any time series groups in this time series category. Default: false'
          schema:
            type: boolean
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/timeseries/category:
    get:
      tags:
        - TimeSeries Categories
      summary: Get swtData timeseries category
      description: Returns CWMS timeseries category Data
      operationId: getSwtDataTimeseriesCategory
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the timeseries category(ies) whose data is to be included in the response. If this field is not specified, matching timeseries category information from all offices shall be returned.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeSeriesCategory'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the categories were not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: request format is not implemented
      security: []
    post:
      tags:
        - TimeSeries Categories
      summary: Post swtData timeseries category
      description: Create new TimeSeriesCategory
      operationId: postSwtDataTimeseriesCategory
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeSeriesCategory'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/timeseries/identifier-descriptor/{timeseries-id}:
    get:
      tags:
        - TimeSeries Identifier
      summary: Get swtData timeseries identifierDescriptor with timeseriesId
      description: Retrieves requested timeseries identifier descriptor
      operationId: getSwtDataTimeseriesIdentifierDescriptorWithTimeseriesId
      parameters:
        - name: timeseries-id
          in: path
          description: Specifies the identifier of the timeseries to be included in the response.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the timeseries identifier to be included in the response.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/TimeSeriesIdentifierDescriptor'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the timeseries identifier descriptor was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: request format is not implemented
      security: []
    delete:
      tags:
        - TimeSeries Identifier
      summary: Delete swtData timeseries identifierDescriptor with timeseriesId
      description: Deletes requested timeseries identifier
      operationId: deleteSwtDataTimeseriesIdentifierDescriptorWithTimeseriesId
      parameters:
        - name: timeseries-id
          in: path
          description: 'The timeseries-id of the timeseries to be deleted. '
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the timeseries to be deleted.
          required: true
          schema:
            type: string
        - name: method
          in: query
          description: Specifies the delete method used.
          required: true
          schema:
            $ref: '#/components/schemas/DeleteMethod'
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - TimeSeries Identifier
      summary: Patch swtData timeseries identifierDescriptor with timeseriesId
      operationId: patchSwtDataTimeseriesIdentifierDescriptorWithTimeseriesId
      parameters:
        - name: timeseries-id
          in: path
          required: true
          schema:
            type: string
        - name: timeseries-id
          in: query
          description: A new timeseries-id.  If specified a rename operation will be performed and snap-forward, snap-backward, and active must not be provided
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the timeseries identifier to be updated
          required: true
          schema:
            type: string
        - name: interval-offset
          in: query
          description: The offset into the data interval in minutes.  If specified and a new timeseries-id is also specified both will be passed to a rename operation.  May also be passed to update operation.
          schema:
            type: integer
            format: int64
        - name: snap-forward
          in: query
          description: The new snap forward tolerance in minutes. This specifies how many minutes before the expected data time that data will be considered to be on time.
          schema:
            type: integer
            format: int64
        - name: snap-backward
          in: query
          description: The new snap backward tolerance in minutes. This specifies how many minutes after the expected data time that data will be considered to be on time.
          schema:
            type: integer
            format: int64
        - name: active
          in: query
          description: '''True'' or ''true'' if the time series is active'
          schema:
            type: boolean
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/timeseries/identifier-descriptor:
    get:
      tags:
        - TimeSeries Identifier
      summary: Get swtData timeseries identifierDescriptor
      description: Returns CWMS timeseries identifier descriptorData
      operationId: getSwtDataTimeseriesIdentifierDescriptor
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the timeseries identifier(s) whose data is to be included in the response. If this field is not specified, matching timeseries identifier information from all offices shall be returned.
          schema:
            type: string
        - name: timeseries-id-regex
          in: query
          description: A case insensitive RegExp that will be applied to the timeseries-id field. If this field is not specified the results will not be constrained by timeseries-id.
          schema:
            type: string
        - name: page
          in: query
          description: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
          schema:
            type: string
        - name: page-size
          in: query
          description: How many entries per page returned. Default 500.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/TimeSeriesIdentifierDescriptors'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the time series identifier descriptors were not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: request format is not implemented
      security: []
    post:
      tags:
        - TimeSeries Identifier
      summary: Post swtData timeseries identifierDescriptor
      description: Create new TimeSeriesIdentifierDescriptor
      operationId: postSwtDataTimeseriesIdentifierDescriptor
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/TimeSeriesIdentifierDescriptor'
          application/xml;version=2:
            schema:
              $ref: '#/components/schemas/TimeSeriesIdentifierDescriptor'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/timeseries/group/{group-id}:
    get:
      tags:
        - Timeseries Groups
      summary: Get swtData timeseries group with groupId
      description: Retrieves requested timeseries group
      operationId: getSwtDataTimeseriesGroupWithGroupId
      parameters:
        - name: group-id
          in: path
          description: Specifies the timeseries group whose data is to be included in the response
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the timeseries group whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: category-id
          in: query
          description: Specifies the category containing the timeseries group whose data is to be included in the response.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSeriesGroup'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Timeseries Groups
      summary: Delete swtData timeseries group with groupId
      description: Deletes requested time series group
      operationId: deleteSwtDataTimeseriesGroupWithGroupId
      parameters:
        - name: group-id
          in: path
          description: The time series group to be deleted
          required: true
          schema:
            type: string
        - name: category-id
          in: query
          description: Specifies the time series category of the time series group to be deleted
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the time series group to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Timeseries Groups
      summary: Patch swtData timeseries group with groupId
      description: Update existing TimeSeriesGroup
      operationId: patchSwtDataTimeseriesGroupWithGroupId
      parameters:
        - name: group-id
          in: path
          required: true
          schema:
            type: string
        - name: replace-assigned-ts
          in: query
          description: 'Specifies whether to unassign all existing time series before assigning new time series specified in the content body Default: false'
          schema:
            type: boolean
        - name: office
          in: query
          description: Specifies the owning office of the time series group to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeSeriesGroup'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/timeseries/group:
    get:
      tags:
        - Timeseries Groups
      summary: Get swtData timeseries group
      description: Returns CWMS Timeseries Groups Data
      operationId: getSwtDataTimeseriesGroup
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the timeseries group(s) whose data is to be included in the response. If this field is not specified, matching timeseries groups information from all offices shall be returned.
          schema:
            type: string
        - name: include-assigned
          in: query
          description: 'Include the assigned timeseries in the returned timeseries groups. (default: true)'
          schema:
            type: boolean
        - name: timeseries-category-like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> matching against the timeseries category id
          schema:
            type: string
        - name: timeseries-group-like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> matching against the timeseries group id
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeSeriesGroup'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the timeseries group(s) were not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: request format is not implemented
      security: []
    post:
      tags:
        - Timeseries Groups
      summary: Post swtData timeseries group
      description: Create new TimeSeriesGroup
      operationId: postSwtDataTimeseriesGroup
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeSeriesGroup'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/timeseries:
    get:
      tags:
        - TimeSeries
      summary: Get swtData timeseries
      operationId: getSwtDataTimeseries
      parameters:
        - name: name
          in: query
          description: Specifies the name(s) of the time series whose data is to be included in the response. A case insensitive comparison is used to match names.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the time series(s) whose data is to be included in the response. If this field is not specified, matching location level information from all offices shall be returned.
          schema:
            type: string
        - name: unit
          in: query
          description: "Specifies the unit or unit system of the response. Valid values for the unit field are:\r\n 1. EN.   (default) Specifies English unit system.  Location level values will be in the default English units for their parameters.\r\n2. SI.   Specifies the SI unit system.  Location level values will be in the default SI units for their parameters.\r\n3. Other. Any unit returned in the response to the units URI request that is appropriate for the requested parameters."
          schema:
            type: string
        - name: version-date
          in: query
          description: Specifies the version date of a time series trace to be selected. The format for this field is ISO 8601 extended, i.e., 'format', e.g., '2021-06-10T13:00:00-0700' .If field is empty, query will return a max aggregate for the timeseries.
          schema:
            type: string
        - name: date-version-type
          in: query
          description: Version type specifies the type of timeseries response to be received. Can be max aggregate or single version. Max aggregate cannot be ran if version date field is specified. If unspecified, defaults to max aggregate.
          schema:
            $ref: '#/components/schemas/VersionType'
        - name: datum
          in: query
          description: "Specifies the elevation datum of the response. This field affects only elevation location levels. Valid values for this field are:\r\n1. NAVD88.  The elevation values will in the specified or default units above the NAVD-88 datum.\r\n2. NGVD29.  The elevation values will be in the specified or default units above the NGVD-29 datum."
          schema:
            type: string
        - name: begin
          in: query
          description: Specifies the start of the time window for data to be included in the response. If this field is not specified, any required time window begins 24 hours prior to the specified or default end time. The format for this field is ISO 8601 extended, with optional offset and timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
          schema:
            type: string
        - name: end
          in: query
          description: Specifies the end of the time window for data to be included in the response. If this field is not specified, any required time window ends at the current time. The format for this field is ISO 8601 extended, with optional timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
          schema:
            type: string
        - name: timezone
          in: query
          description: "Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.\r\nIgnored if begin was specified with offset and timezone."
          schema:
            type: string
        - name: format
          in: query
          description: "Specifies the encoding format of the response. Valid values for the format field for this URI are:\r\n1.    tab\r\n2.    csv\r\n3.    xml\r\n4.  wml2 (only if name field is specified)\r\n5.    json (default)"
          schema:
            type: string
        - name: page
          in: query
          description: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
          schema:
            type: string
        - name: page-size
          in: query
          description: How many entries per page returned. Default 500.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A list of elements of the data set you've selected.
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/TimeSeries'
            application/xml;version=2:
              schema:
                $ref: '#/components/schemas/TimeSeries'
            application/xml:
              schema:
                $ref: '#/components/schemas/TimeSeries'
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSeries'
            '':
              schema:
                $ref: '#/components/schemas/TimeSeries'
        '400':
          description: Invalid parameter combination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: The provided combination of parameters did not find a timeseries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: Requested format is not implemented
      security: []
    post:
      tags:
        - TimeSeries
      summary: Post swtData timeseries
      description: 'Used to create and save time-series data. Data to be stored must have time stamps in UTC represented as epoch milliseconds '
      operationId: postSwtDataTimeseries
      parameters:
        - name: timezone
          in: query
          description: "Specifies the time zone of the version-date field (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.\r\nIgnored if version-date was specified with offset and timezone."
          schema:
            type: string
        - name: create-as-lrts
          in: query
          description: Flag indicating if timeseries should be created as Local Regular Time Series. 'True' or 'False', default is 'False'
          schema:
            type: boolean
        - name: store-rule
          in: query
          description: |-
            The business rule to use when merging the incoming with existing data
            <table  border="1" summary="">
            <tr><td colspan=2>Store Rules</td></tr>
            <tr>
                <td>Delete Insert</td>
                <td>All existing data in the time window will be deleted and then replaced with the new dataset.</td>
            </tr>
            <tr>
                <td>Replace All</td>
                <td>
                    <ul>
                        <li>When the new dataset's date/time exactly matches the date/time of an existing data value, the new data value will replace the existing data.</li>
                    <li>When the new dataset's data/time does not match an existing data/time (i.e., a new data/time - data value pair) then an insert to the database will occur.</li>
                        <li>When there's an existing "data/time - data value pair" without a corresponding date/time value pair, no change will happen to the existing date/time value pair.</li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Replace With Non Missing</td>
                <td>
                    <ul>
                        <li>New data is always inserted, i.e., an existing date/time-value pair does not already exist for the record.</li>
                        <li>If date/time-value pair does exist, then only non-missing value will replace the existing data value*.</li>
                    </ul>
                </td>
            <tr>
                <td>Replace Missing Values Only</td>
                <td>
                    <ul>
                        <li>New data is always inserted, i.e., an existing date/time-value pair does not already exist for the record.</li>
                        <li>If date/time-value pair does exist, then only replace an existing data/time-value pair whose missing flag was set.</li>
                    </ul>
                </td>
            <tr>
                <td>Do Not Replace</td>
                <td>
                    Only inserts new data values if an existing date/time-value pair does not already exist.
                    Note: an existing date/time-value pair whose missing value quality bit is set will NOT be overwritten.
                </td>
            </tr>
            </table>
          schema:
            $ref: '#/components/schemas/StoreRule'
        - name: override-protection
          in: query
          description: A flag to ignore the protected data quality when storing data. 'True' or 'False'
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/TimeSeries'
          application/xml;version=2:
            schema:
              $ref: '#/components/schemas/TimeSeries'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/timeseries/{timeseries}:
    delete:
      tags:
        - TimeSeries
      summary: Delete swtData timeseries with timeseries
      operationId: deleteSwtDataTimeseriesWithTimeseries
      parameters:
        - name: timeseries
          in: path
          description: 'The timeseries-id of the timeseries values to be deleted. '
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the office of the timeseries to be deleted.
          required: true
          schema:
            type: string
        - name: begin
          in: query
          description: The start of the time window to delete. The format for this field is ISO 8601 extended, with optional offset and timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
          required: true
          schema:
            type: string
        - name: end
          in: query
          description: The end of the time window to delete.The format for this field is ISO 8601 extended, with optional offset and timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
          required: true
          schema:
            type: string
        - name: timezone
          in: query
          description: This field specifies a default timezone to be used if the format of the begin, end, or version-date parameters do not include offset or time zone information. Defaults to UTC.
          schema:
            type: string
        - name: version-date
          in: query
          description: The version date/time of the time series in the specified or default time zone. If NULL, the earliest or latest version date will be used depending on p_max_version.
          schema:
            type: string
        - name: start-time-inclusive
          in: query
          description: A flag specifying whether any data at the start time should be deleted ('True') or only data <b><em>after</em></b> the start time ('False').  Default value is True
          schema:
            type: boolean
        - name: end-time-inclusive
          in: query
          description: A flag ('True'/'False') specifying whether any data at the end time should be deleted ('True') or only data <b><em>before</em></b> the end time ('False'). Default value is False
          schema:
            type: boolean
        - name: max-version
          in: query
          description: A flag ('True'/'False') specifying whether to use the earliest ('False') or latest ('True') version date for each time if p_version_date is NULL.  Default is 'True'
          schema:
            type: boolean
        - name: override-protection
          in: query
          description: A flag ('True'/'False') specifying whether to delete protected data. Default is False
          schema:
            type: boolean
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - TimeSeries
      summary: Patch swtData timeseries with timeseries
      description: Update a TimeSeries with provided values
      operationId: patchSwtDataTimeseriesWithTimeseries
      parameters:
        - name: timeseries
          in: path
          description: Full CWMS Timeseries name
          required: true
          schema:
            type: string
        - name: timezone
          in: query
          description: "Specifies the time zone of the version-date field (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.\r\nIgnored if version-date was specified with offset and timezone."
          schema:
            type: string
        - name: create-as-lrts
          in: query
          description: ''
          schema:
            type: boolean
        - name: store-rule
          in: query
          description: |-
            The business rule to use when merging the incoming with existing data
            <table  border="1" summary="">
            <tr><td colspan=2>Store Rules</td></tr>
            <tr>
                <td>Delete Insert</td>
                <td>All existing data in the time window will be deleted and then replaced with the new dataset.</td>
            </tr>
            <tr>
                <td>Replace All</td>
                <td>
                    <ul>
                        <li>When the new dataset's date/time exactly matches the date/time of an existing data value, the new data value will replace the existing data.</li>
                    <li>When the new dataset's data/time does not match an existing data/time (i.e., a new data/time - data value pair) then an insert to the database will occur.</li>
                        <li>When there's an existing "data/time - data value pair" without a corresponding date/time value pair, no change will happen to the existing date/time value pair.</li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Replace With Non Missing</td>
                <td>
                    <ul>
                        <li>New data is always inserted, i.e., an existing date/time-value pair does not already exist for the record.</li>
                        <li>If date/time-value pair does exist, then only non-missing value will replace the existing data value*.</li>
                    </ul>
                </td>
            <tr>
                <td>Replace Missing Values Only</td>
                <td>
                    <ul>
                        <li>New data is always inserted, i.e., an existing date/time-value pair does not already exist for the record.</li>
                        <li>If date/time-value pair does exist, then only replace an existing data/time-value pair whose missing flag was set.</li>
                    </ul>
                </td>
            <tr>
                <td>Do Not Replace</td>
                <td>
                    Only inserts new data values if an existing date/time-value pair does not already exist.
                    Note: an existing date/time-value pair whose missing value quality bit is set will NOT be overwritten.
                </td>
            </tr>
            </table>
          schema:
            $ref: '#/components/schemas/StoreRule'
        - name: override-protection
          in: query
          description: A flag to ignore the protected data quality when storing data.  "'true' or 'false'"
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/TimeSeries'
          application/xml;version=2:
            schema:
              $ref: '#/components/schemas/TimeSeries'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/ratings/template/{template-id}:
    get:
      tags:
        - Ratings
      summary: Get swtData ratings template with templateId
      operationId: getSwtDataRatingsTemplateWithTemplateId
      parameters:
        - name: template-id
          in: path
          description: Specifies the template whose data is to be included in the response
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the Rating Templates whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RatingTemplate'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Ratings
      summary: Delete swtData ratings template with templateId
      description: Deletes requested rating specification
      operationId: deleteSwtDataRatingsTemplateWithTemplateId
      parameters:
        - name: template-id
          in: path
          description: The rating-template-id of the ratings data to be deleted.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the ratings to be deleted.
          required: true
          schema:
            type: string
        - name: method
          in: query
          description: Specifies the delete method used.
          required: true
          schema:
            $ref: '#/components/schemas/DeleteMethod'
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/ratings/template:
    get:
      tags:
        - Ratings
      summary: Get swtData ratings template
      operationId: getSwtDataRatingsTemplate
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the Rating Templates whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
          schema:
            type: string
        - name: template-id-mask
          in: query
          description: RegExp that specifies the rating template IDs to be included in the response. If this field is not specified, all rating templates shall be returned.
          schema:
            type: string
        - name: page
          in: query
          description: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
          schema:
            type: string
        - name: page-size
          in: query
          description: How many entries per page returned. Default 100.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/RatingTemplates'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Ratings
      summary: Post swtData ratings template
      description: Create new Rating Template
      operationId: postSwtDataRatingsTemplate
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/xml;version=2:
            schema:
              $ref: '#/components/schemas/RatingTemplate'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/ratings/spec/{rating-id}:
    get:
      tags:
        - Ratings
      summary: Get swtData ratings spec with ratingId
      operationId: getSwtDataRatingsSpecWithRatingId
      parameters:
        - name: rating-id
          in: path
          description: Specifies the rating-id of the Rating Spec to be included in the response
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the Rating Specs whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/RatingSpec'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Ratings
      summary: Delete swtData ratings spec with ratingId
      description: Deletes requested rating specification
      operationId: deleteSwtDataRatingsSpecWithRatingId
      parameters:
        - name: rating-id
          in: path
          description: The rating-spec-id of the ratings data to be deleted.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the ratings to be deleted.
          required: true
          schema:
            type: string
        - name: method
          in: query
          description: Specifies the delete method used.
          required: true
          schema:
            $ref: '#/components/schemas/DeleteMethod'
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/ratings/spec:
    get:
      tags:
        - Ratings
      summary: Get swtData ratings spec
      operationId: getSwtDataRatingsSpec
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the Rating Specs whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
          schema:
            type: string
        - name: rating-id-mask
          in: query
          description: Posix <a href="regexp.html">regular expression</a>  that specifies the rating IDs to be included in the response. If this field is not specified, all Rating Specs shall be returned.
          schema:
            type: string
        - name: page
          in: query
          description: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
          schema:
            type: string
        - name: page-size
          in: query
          description: How many entries per page returned. Default 100.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/RatingSpecs'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Ratings
      summary: Post swtData ratings spec
      description: Create new Rating Specification
      operationId: postSwtDataRatingsSpec
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/xml;version=2:
            schema:
              $ref: '#/components/schemas/RatingSpec'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/ratings/metadata:
    get:
      tags:
        - Ratings
      summary: Get swtData ratings metadata
      operationId: getSwtDataRatingsMetadata
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the Rating Specs whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
          schema:
            type: string
        - name: rating-id-mask
          in: query
          description: RegExp that specifies the rating IDs to be included in the response. If this field is not specified, all Rating Specs shall be returned.
          schema:
            type: string
        - name: start
          in: query
          description: Specifies the start of the time window of the effective dates to be included. If this field is not specified no start time will be used.
          schema:
            type: string
        - name: end
          in: query
          description: Specifies the end of the time window for effective dates to be included. If this field is not specified no end time will be used.
          schema:
            type: string
        - name: timezone
          in: query
          description: Specifies the time zone of the values of the begin and end fields (unless otherwise specified). If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
        - name: page
          in: query
          description: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
          schema:
            type: string
        - name: page-size
          in: query
          description: How many entries per page returned. Default 50.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/RatingMetadataList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /swt-data/ratings/{rating-id}:
    get:
      tags:
        - Ratings
      summary: Get swtData ratings with ratingId
      description: Returns CWMS Rating Data
      operationId: getSwtDataRatingsWithRatingId
      parameters:
        - name: rating-id
          in: path
          description: 'The rating-id of the effective dates to be retrieve. '
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the ratingset to be included in the response.
          required: true
          schema:
            type: string
        - name: begin
          in: query
          description: Specifies the start of the time window for data to be included in the response. If this field is not specified no start time will be used.
          schema:
            type: string
        - name: end
          in: query
          description: Specifies the end of the time window for data to be included in the response. If this field is not specified no end time will be used.
          schema:
            type: string
        - name: timezone
          in: query
          description: Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
        - name: method
          in: query
          description: Specifies the retrieval method used.  If no method is provided EAGER will be used.
          schema:
            $ref: '#/components/schemas/DatabaseLoadMethod'
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/Unit'
            application/xml;version=2:
              schema:
                $ref: '#/components/schemas/Unit'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Ratings
      summary: Delete swtData ratings with ratingId
      operationId: deleteSwtDataRatingsWithRatingId
      parameters:
        - name: rating-id
          in: path
          description: 'The rating-id of the effective dates to be deleted. '
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the office of the ratings to be deleted.
          required: true
          schema:
            type: string
        - name: begin
          in: query
          description: The start of the time window to delete. The format for this field is ISO 8601 extended, with optional offset and timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
          required: true
          schema:
            type: string
        - name: end
          in: query
          description: The end of the time window to delete.The format for this field is ISO 8601 extended, with optional offset and timezone, i.e., 'YYYY-MM-dd'T'hh:mm:ss[Z'['VV']']', e.g., '2021-06-10T13:00:00-0700[PST8PDT]'.
          required: true
          schema:
            type: string
        - name: timezone
          in: query
          description: This field specifies a default timezone to be used if the format of the begin, end, or version-date parameters do not include offset or time zone information. Defaults to UTC.
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Ratings
      summary: Patch swtData ratings with ratingId
      description: Update a RatingSet
      operationId: patchSwtDataRatingsWithRatingId
      parameters:
        - name: rating-id
          in: path
          required: true
          schema:
            type: string
        - name: store-template
          in: query
          description: 'Also store updates to the rating template. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/xml;version=2:
            schema:
              $ref: '#/components/schemas/Unit'
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/Unit'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/ratings:
    get:
      tags:
        - Ratings
      summary: Get swtData ratings
      operationId: getSwtDataRatings
      parameters:
        - name: name
          in: query
          description: Specifies the name(s) of the rating whose data is to be included in the response. A case insensitive comparison is used to match names.
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the Rating(s) whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
          schema:
            type: string
        - name: unit
          in: query
          description: "Specifies the unit or unit system of the response. Valid values for the unit field are:\r\n1. EN.   Specifies English unit system.  Rating values will be in the default English units for their parameters.\r\n2. SI.   Specifies the SI unit system.  Rating values will be in the default SI units for their parameters.\r\n3. Other. Any unit returned in the response to the units URI request that is appropriate for the requested parameters."
          schema:
            type: string
        - name: datum
          in: query
          description: "Specifies the elevation datum of the response. This field affects only elevation Ratings. Valid values for this field are:\r\n1. NAVD88.  The elevation values will in the specified or default units above the NAVD-88 datum.\r\n2. NGVD29.  The elevation values will be in the specified or default units above the NGVD-29 datum."
          schema:
            type: string
        - name: at
          in: query
          description: Specifies the start of the time window for data to be included in the response. If this field is not specified, any required time window begins 24 hours prior to the specified or default end time.
          schema:
            type: string
        - name: end
          in: query
          description: Specifies the end of the time window for data to be included in the response. If this field is not specified, any required time window ends at the current time
          schema:
            type: string
        - name: timezone
          in: query
          description: Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.
          schema:
            type: string
        - name: format
          in: query
          description: "Specifies the encoding format of the response. Valid values for the format field for this URI are:\r\n1.    tab\r\n2.    csv\r\n3.    xml\r\n4.    json (default)"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
            application/xml:
              schema:
                $ref: '#/components/schemas/Unit'
            text/tab-separated-values:
              schema:
                type: string
            text/csv:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: The provided combination of parameters did not find a rating table.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: Requested format is not implemented
      security: []
    post:
      tags:
        - Ratings
      summary: Post swtData ratings
      description: Create new RatingSet
      operationId: postSwtDataRatings
      parameters:
        - name: store-template
          in: query
          description: 'Also store updates to the rating template. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/xml;version=2:
            schema:
              $ref: '#/components/schemas/Unit'
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/Unit'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/catalog/{dataset}:
    get:
      tags:
        - Catalog
      summary: Get swtData catalog with dataset
      operationId: getSwtDataCatalogWithDataset
      parameters:
        - name: dataset
          in: path
          description: A list of what data? E.g. Timeseries, Locations, Ratings, etc
          required: true
          schema:
            $ref: '#/components/schemas/CatalogableEndpoint'
        - name: page
          in: query
          description: This end point can return a lot of data, this identifies where in the request you are.
          schema:
            type: string
        - name: page-size
          in: query
          description: How many entires per page returned. Default 500.
          schema:
            type: integer
            format: int32
        - name: unit-system
          in: query
          description: Unit System desired in response. Can be SI (International Scientific) or EN (Imperial.) If unspecified, defaults to SI.
          schema:
            $ref: '#/components/schemas/UnitSystem'
        - name: office
          in: query
          description: 3-4 letter office name representing the district you want to isolate data to.
          schema:
            type: string
        - name: like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> matching against the id
          schema:
            type: string
        - name: timeseries-category-like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> matching against the timeseries category id
          schema:
            type: string
        - name: timeseries-group-like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> matching against the timeseries group id
          schema:
            type: string
        - name: location-category-like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> matching against the location category id
          schema:
            type: string
        - name: location-group-like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> matching against the location group id
          schema:
            type: string
        - name: bounding-office-like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> matching against the location bounding office. When this field is used items with no bounding office set will not be present in results.
          schema:
            type: string
      responses:
        '200':
          description: A list of elements the data set you've selected.
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/Catalog'
            application/xml:
              schema:
                $ref: '#/components/schemas/Catalog'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /swt-data/basins/{basin-id}:
    get:
      tags:
        - Basins
      summary: Get swtData basins with basinId
      description: Returns CWMS Basin Data
      operationId: getSwtDataBasinsWithBasinId
      parameters:
        - name: basin-id
          in: path
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the basin whose data is to be included in the response. If this field is not specified, matching basin information from all offices shall be returned.
          schema:
            type: string
        - name: unit
          in: query
          description: "Specifies the unit or unit system of the response. Valid values for the unit field are:\r\n 1. EN.   Specifies English unit system. Basin values will be in the default English units for their parameters. (This is default if no value is entered)\r\n2. SI.   Specifies the SI unit system. Basin values will be in the default SI units for their parameters."
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.named+pg+json:
              schema:
                $ref: '#/components/schemas/Basin'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: The provided combination of parameters did not find a basin.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: Requested format is not implemented
      security: []
  /swt-data/basins:
    get:
      tags:
        - Basins
      summary: Get swtData basins
      description: Returns CWMS Basin Data
      operationId: getSwtDataBasins
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the basin whose data is to be included in the response. If this field is not specified, matching basin information from all offices shall be returned.
          schema:
            type: string
        - name: unit
          in: query
          description: "Specifies the unit or unit system of the response. Valid values for the unit field are:\r\n 1. EN.   Specifies English unit system. Basin values will be in the default English units for their parameters. (This is default if no value is entered)\r\n2. SI.   Specifies the SI unit system. Basin values will be in the default SI units for their parameters."
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.named+pg+json:
              schema:
                $ref: '#/components/schemas/Basin'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: The provided combination of parameters did not find a basin.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: Requested format is not implemented
      security: []
  /swt-data/blobs/{blob-id}:
    get:
      tags:
        - Blob
      summary: Get swtData blobs with blobId
      operationId: getSwtDataBlobsWithBlobId
      parameters:
        - name: blob-id
          in: path
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office.
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
  /swt-data/blobs:
    get:
      tags:
        - Blob
      summary: Get swtData blobs
      operationId: getSwtDataBlobs
      parameters:
        - name: office
          in: query
          description: Specifies the owning office. If this field is not specified, matching information from all offices shall be returned.
          schema:
            type: string
        - name: page
          in: query
          description: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
          schema:
            type: string
        - name: page-size
          in: query
          description: How many entries per page returned. Default 20.
          schema:
            type: integer
            format: int32
        - name: like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> describing the blob id's you want
          schema:
            type: string
      responses:
        '200':
          description: A list of blobs.
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/Blobs'
            application/xml;version=2:
              schema:
                $ref: '#/components/schemas/Blobs'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Blob
      summary: Post swtData blobs
      description: Create new Blob
      operationId: postSwtDataBlobs
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/Blob'
          application/xml;version=2:
            schema:
              $ref: '#/components/schemas/Blob'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/clobs/{clob-id}:
    get:
      tags:
        - Clob
      summary: Get swtData clobs with clobId
      description: Get a single clob.  If the accept header is set to text/plain, the raw value is returned as the response body. Responses to text/plain requests are streamed and support the Range header.  When the accept header is set to application/json;version=2 the clob will be returned as a serialized Clob object with fields for office-id, id, description and value.
      operationId: getSwtDataClobsWithClobId
      parameters:
        - name: clob-id
          in: path
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office.
          schema:
            type: string
        - name: clob-id
          in: query
          description: 'If this _query_ parameter is provided the id _path_ parameter is ignored and the value of the query parameter is used.   Note: this query parameter is necessary for id''s that contain ''/'' or other special characters.  Because of abuse even properly escaped ''/'' in url paths are blocked.  When using this query parameter a valid path parameter must still be provided for the request to be properly routed.  If your clob id contains ''/'' you can''t specify the clob-id query parameter and also specify the id path parameter because firewall and/or server rules will deny the request even though you are specifying this override. "ignored" is suggested.'
          schema:
            type: string
      responses:
        '200':
          description: Returns requested clob.
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/Clob'
            text/plain:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    delete:
      tags:
        - Clob
      summary: Delete swtData clobs with clobId
      description: Delete clob
      operationId: deleteSwtDataClobsWithClobId
      parameters:
        - name: clob-id
          in: path
          description: Specifies the id of the clob to be deleted
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the office of the clob.
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Clob
      summary: Patch swtData clobs with clobId
      description: Update clob
      operationId: patchSwtDataClobsWithClobId
      parameters:
        - name: clob-id
          in: path
          description: Specifies the id of the clob to be updated
          required: true
          schema:
            type: string
        - name: ignore-nulls
          in: query
          description: 'If true, null and empty fields in the provided clob will be ignored and the existing value of those fields left in place. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/Clob'
          application/xml;version=2:
            schema:
              $ref: '#/components/schemas/Clob'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/clobs:
    get:
      tags:
        - Clob
      summary: Get swtData clobs
      operationId: getSwtDataClobs
      parameters:
        - name: office
          in: query
          description: Specifies the owning office. If this field is not specified, matching information from all offices shall be returned.
          schema:
            type: string
        - name: page
          in: query
          description: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
          schema:
            type: string
        - name: page-size
          in: query
          description: How many entries per page returned. Default 20.
          schema:
            type: integer
            format: int32
        - name: include-values
          in: query
          description: 'Do you want the value associated with this particular clob (default: false)'
          schema:
            type: boolean
        - name: like
          in: query
          description: Posix <a href="regexp.html">regular expression</a> matching against the id
          schema:
            type: string
      responses:
        '200':
          description: A list of clobs.
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/Clobs'
            application/xml;version=2:
              schema:
                $ref: '#/components/schemas/Clobs'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Clob
      summary: Post swtData clobs
      description: Create new Clob
      operationId: postSwtDataClobs
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/Clob'
          application/xml;version=2:
            schema:
              $ref: '#/components/schemas/Clob'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/pools/{pool-id}:
    get:
      tags:
        - Pools
      summary: Get swtData pools with poolId
      description: Retrieves requested Pool
      operationId: getSwtDataPoolsWithPoolId
      parameters:
        - name: pool-id
          in: path
          description: Specifies the pool whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the Pool whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: project-id
          in: query
          description: Specifies the project-id of the Pool whose data is to be included in the response.
          required: true
          schema:
            type: string
        - name: bottom-mask
          in: query
          description: Bottom level mask. Default value:*
          schema:
            type: string
        - name: top-mask
          in: query
          description: Top level mask. Default value:*
          schema:
            type: string
        - name: include-explicit
          in: query
          description: Specifies if the results should include explicit Pools. Default value:false
          schema:
            type: string
        - name: include-implicit
          in: query
          description: Specifies if the results should include implicit Pools. Default value:true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/Pool'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the Location Category was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: request format is not implemented
      security: []
  /swt-data/pools:
    get:
      tags:
        - Pools
      summary: Get swtData pools
      description: Returns Pools Data
      operationId: getSwtDataPools
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the data in the response. If this field is not specified, matching items from all offices shall be returned.
          schema:
            type: string
        - name: id-mask
          in: query
          description: Project Id mask. Default value:*
          schema:
            type: string
        - name: name-mask
          in: query
          description: Name mask. Default value:*
          schema:
            type: string
        - name: bottom-mask
          in: query
          description: Bottom level mask. Default value:*
          schema:
            type: string
        - name: top-mask
          in: query
          description: Top level mask. Default value:*
          schema:
            type: string
        - name: include-explicit
          in: query
          description: Specifies if the results should include explicit Pools. Default value:false
          schema:
            type: string
        - name: include-implicit
          in: query
          description: Specifies if the results should include implicit Pools. Default value:true
          schema:
            type: string
        - name: page
          in: query
          description: This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
          schema:
            type: string
        - name: page-size
          in: query
          description: How many entries per page returned. Default 100.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/Pools'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Based on the combination of inputs provided the pools were not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '501':
          description: request format is not implemented
      security: []
  /swt-data/specified-levels:
    get:
      tags:
        - Levels
      summary: Get swtData specifiedLevels
      operationId: getSwtDataSpecifiedLevels
      parameters:
        - name: office
          in: query
          description: Specifies the owning office of the Specified Levels whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
          schema:
            type: string
        - name: template-id-mask
          in: query
          description: Mask that specifies the IDs to be included in the response. If this field is not specified, all specified levels shall be returned.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;version=2:
              schema:
                $ref: '#/components/schemas/SpecifiedLevel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security: []
    post:
      tags:
        - Levels
      summary: Post swtData specifiedLevels
      description: Create new SpecifiedLevel
      operationId: postSwtDataSpecifiedLevels
      parameters:
        - name: fail-if-exists
          in: query
          description: 'Create will fail if provided ID already exists. Default: true'
          schema:
            type: boolean
      requestBody:
        content:
          application/json;version=2:
            schema:
              $ref: '#/components/schemas/SpecifiedLevel'
        required: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
  /swt-data/specified-levels/{specified-level-id}:
    delete:
      tags:
        - Levels
      summary: Delete swtData specifiedLevels with specifiedLevelId
      description: Deletes requested specified level id
      operationId: deleteSwtDataSpecifiedLevelsWithSpecifiedLevelId
      parameters:
        - name: specified-level-id
          in: path
          description: The specified level id to be deleted
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the timeseries identifier to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
    patch:
      tags:
        - Levels
      summary: Patch swtData specifiedLevels with specifiedLevelId
      description: Renames the requested specified level id
      operationId: patchSwtDataSpecifiedLevelsWithSpecifiedLevelId
      parameters:
        - name: specified-level-id
          in: path
          required: true
          schema:
            type: string
        - name: specified-level-id
          in: query
          description: The new specified level id.
          required: true
          schema:
            type: string
        - name: office
          in: query
          description: Specifies the owning office of the specified level to be renamed
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdaError'
      security:
        - CwmsAAACacAuth: []
        - ApiKey: []
components:
  schemas:
    CdaError:
      type: object
      properties:
        message:
          type: string
        incidentIdentifier:
          type: string
          description: A randomly generated number to help identify your request in the logs for analysis..
        details:
          type: object
          additionalProperties:
            type: object
    ApiKey:
      required:
        - key-name
        - user-id
      type: object
      properties:
        user-id:
          type: string
        key-name:
          type: string
        api-key:
          type: string
        created:
          type: string
          description: The instant this Key was created, in ISO-8601 format with offset and timezone ('yyyy-MM-dd'T'HH:mm:ssZ'['VV']'')
          format: date-time
          readOnly: true
        expires:
          type: string
          description: When this key expires, in ISO-8601 format with offset and timezone ('yyyy-MM-dd'T'HH:mm:ssZ'['VV']'')
          format: date-time
    LocationCategory:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
        description:
          type: string
      description: A representation of a location category
      xml:
        name: location_category
    AssignedLocation:
      type: object
      properties:
        locationId:
          type: string
        officeId:
          type: string
        aliasId:
          type: string
        attribute:
          type: number
        refLocationId:
          type: string
    LocationGroup:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
        location-category:
          $ref: '#/components/schemas/LocationCategory'
        description:
          type: string
        shared-loc-alias-id:
          type: string
        shared-ref-location-id:
          type: string
        loc-group-attribute:
          type: number
        assigned-locations:
          type: array
          items:
            $ref: '#/components/schemas/AssignedLocation'
      description: A representation of a location group
      xml:
        name: location_group
    LocationGroup_CSV:
      type: object
      description: Single LocationGroup or List of LocationGroups in comma separated format
      example: "#LocationGroup Id, OfficeId, Description, CategoryId, CategoryOfficeId, SharedLocAliasId, SharedRefLocationId, LocGroupAttribute\r\nCERL,Construction Engineering Research Laboratory,Field Operating Activity\tERD\r\nCHL,Coastal and Hydraulics Laboratory,Field Operating Activity\tERD\r\nNAB,Baltimore District,District,NAD\r\nNAD,North Atlantic Division,Division Headquarters,HQ"
    CsvV1LocationGroup:
      type: object
      description: Single LocationGroup or List of LocationGroups in comma separated format
      example: "#LocationGroup Id, OfficeId, Description, CategoryId, CategoryOfficeId, SharedLocAliasId, SharedRefLocationId, LocGroupAttribute\r\nCERL,Construction Engineering Research Laboratory,Field Operating Activity\tERD\r\nCHL,Coastal and Hydraulics Laboratory,Field Operating Activity\tERD\r\nNAB,Baltimore District,District,NAD\r\nNAD,North Atlantic Division,Division Headquarters,HQ"
    Unit:
      type: object
    Location:
      required:
        - name
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        name:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        active:
          type: boolean
        public-name:
          type: string
        long-name:
          type: string
        description:
          type: string
        timezone-name:
          type: string
        location-type:
          type: string
        location-kind:
          type: string
        nation:
          type: string
          enum:
            - US
            - CANADA
            - MEXICO
        state-initial:
          type: string
        county-name:
          type: string
        nearest-city:
          type: string
        horizontal-datum:
          type: string
        published-longitude:
          type: number
          format: double
        published-latitude:
          type: number
          format: double
        vertical-datum:
          type: string
        elevation:
          type: number
          format: double
        map-label:
          type: string
        bounding-office-id:
          type: string
    State:
      type: object
      properties:
        stateInitial:
          type: string
          xml:
            name: state-initial
        name:
          type: string
      description: A representation of a state
      xml:
        name: state
    County:
      type: object
      properties:
        name:
          type: string
        countyId:
          type: string
          xml:
            name: county-id
        stateInitial:
          type: string
          xml:
            name: state-initial
      description: A representation of a county
      xml:
        name: county
    Office:
      type: object
      properties:
        name:
          type: string
        longName:
          type: string
          xml:
            name: long-name
        type:
          type: string
          enum:
            - unknown
            - corps headquarters
            - division headquarters
            - division regional
            - district
            - filed operating activity
        reportsTo:
          type: string
          description: Reference to another office, like a division, that this office reports to.
          xml:
            name: reports-to
      description: A representation of a CWMS office
      xml:
        name: office
    OfficeFormatV1:
      type: object
      properties:
        offices:
          $ref: '#/components/schemas/OfficesFMT'
    OfficesFMT:
      type: object
      properties:
        offices:
          type: array
          items:
            $ref: '#/components/schemas/Office'
    Office_Tabulation:
      type: object
      properties:
        Office:
          type: string
        longName:
          type: string
        officeType:
          type: string
        reportsToOffice:
          type: string
      description: Single Office or List of Offices in tab separated format
      example: "#Office Name<tab>Long Name<tab>Office Type<tab>Reports To Office\r\nCERL\tConstruction Engineering Research Laboratory\tField Operating Activity\tERD\r\nCHL\tCoastal and Hydraulics Laboratory\tField Operating Activity\tERD\r\nNAB\tBaltimore District\tDistrict\tNADNAD\tNorth Atlantic Division\tDivision Headquarters\tHQ"
    TabV1Office:
      type: object
      properties:
        Office:
          type: string
        longName:
          type: string
        officeType:
          type: string
        reportsToOffice:
          type: string
      description: Single Office or List of Offices in tab separated format
      example: "#Office Name<tab>Long Name<tab>Office Type<tab>Reports To Office\r\nCERL\tConstruction Engineering Research Laboratory\tField Operating Activity\tERD\r\nCHL\tCoastal and Hydraulics Laboratory\tField Operating Activity\tERD\r\nNAB\tBaltimore District\tDistrict\tNADNAD\tNorth Atlantic Division\tDivision Headquarters\tHQ"
    Office_CSV:
      type: object
      properties:
        Office:
          type: string
        longName:
          type: string
        officeType:
          type: string
        reportsToOffice:
          type: string
      description: Single Office or List of Offices in comma separated format
      example: "#Office Name,Long Name,Office Type,Reports To Office\r\nCERL,Construction Engineering Research Laboratory,Field Operating Activity\tERD\r\nCHL,Coastal and Hydraulics Laboratory,Field Operating Activity\tERD\r\nNAB,Baltimore District,District,NAD\r\nNAD,North Atlantic Division,Division Headquarters,HQ"
    CsvV1Office:
      type: object
      properties:
        Office:
          type: string
        longName:
          type: string
        officeType:
          type: string
        reportsToOffice:
          type: string
      description: Single Office or List of Offices in comma separated format
      example: "#Office Name,Long Name,Office Type,Reports To Office\r\nCERL,Construction Engineering Research Laboratory,Field Operating Activity\tERD\r\nCHL,Coastal and Hydraulics Laboratory,Field Operating Activity\tERD\r\nNAB,Baltimore District,District,NAD\r\nNAD,North Atlantic Division,Division Headquarters,HQ"
    LocationLevel:
      required:
        - location-level-id
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        location-level-id:
          type: string
          description: Name of the location level
        seasonal-time-series-id:
          type: string
          description: Timeseries ID (e.g. from the times series catalog) to use as the location level. Mutually exclusive with seasonalValues and siParameterUnitsConstantValue
        seasonal-values:
          type: array
          description: List of Repeating seasonal values. The values repeater after the specified interval. A yearly interval seasonable could have 12 different values, one for each month for example. Mutually exclusive with seasonalTimeSeriesId and siParameterUnitsConstantValue
          items:
            $ref: '#/components/schemas/SeasonalValueBean'
        specified-level-id:
          type: string
          description: Generic name of this location level. Common names are 'Top of Dam', 'Streambed', 'Bottom of Dam'.
        parameter-type-id:
          type: string
          description: To indicate if single or aggregate value
          enum:
            - Inst
            - Ave
            - Min
            - Max
            - Total
        parameter-id:
          type: string
          description: Data Type such as Stage, Elevation, or others.
        constant-value:
          type: number
          description: Single value for this location level. Mutually exclusive with seasonableTimeSeriesId and seasonValues.
          format: double
        level-units-id:
          type: string
          description: Units the provided levels are in
        level-date:
          type: string
          description: The date/time at which this location level configuration takes effect.
          format: date-time
        level-comment:
          type: string
        interval-origin:
          type: string
          description: The start point of provided seasonal values
          format: date-time
        interval-months:
          type: integer
          format: int32
        interval-minutes:
          type: integer
          format: int32
        interpolate-string:
          type: string
          description: Indicating whether or not to interpolate between seasonal values.
          enum:
            - T
            - F
        duration-id:
          type: string
          description: 0 if parameterTypeId is Inst. Otherwise duration indicating the time window of the aggregate value.
        attribute-value:
          type: number
        attribute-units-id:
          type: string
        attribute-parameter-type-id:
          type: string
        attribute-parameter-id:
          type: string
        attribute-duration-id:
          type: string
        attribute-comment:
          type: string
    SeasonalValueBean:
      type: object
      properties:
        value:
          type: number
          format: double
        offset-months:
          type: integer
          format: int32
        offset-minutes:
          type: integer
      description: List of Repeating seasonal values. The values repeater after the specified interval. A yearly interval seasonable could have 12 different values, one for each month for example. Mutually exclusive with seasonalTimeSeriesId and siParameterUnitsConstantValue
    LocationLevels:
      type: object
      properties:
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
        levels:
          type: array
          description: List of retrieved location levels
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/LocationLevel'
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
      xml:
        name: location-levels
    StandardTextId:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
    StandardTextValue:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/StandardTextId'
        standard-text:
          type: string
    StandardTextCatalog:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/StandardTextValue'
    DeleteMethod:
      type: string
      enum:
        - DELETE_ALL
        - DELETE_KEY
        - DELETE_DATA
    TimeSeriesTextMode:
      type: string
      enum:
        - ALL
        - STANDARD
        - REGULAR
    RegularTextTimeSeriesRow:
      type: object
      properties:
        date-time:
          type: string
          format: date-time
        version-date:
          type: string
          format: date-time
        data-entry-date:
          type: string
          format: date-time
        attribute:
          type: integer
          format: int64
        text-id:
          type: string
        text-value:
          type: string
    StandardCatalog:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        entries:
          type: array
          items:
            $ref: '#/components/schemas/StandardCatalogEntry'
    StandardCatalogEntry:
      type: object
      properties:
        id:
          type: string
        value:
          type: string
    StandardTextTimeSeriesRow:
      type: object
      properties:
        date-time:
          type: string
          format: date-time
        version-date:
          type: string
          format: date-time
        data-entry-date:
          type: string
          format: date-time
        attribute:
          type: integer
          format: int64
        office-id:
          type: string
        standard-text-id:
          type: string
        text-value:
          type: string
    TextTimeSeries:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        name:
          type: string
        interval-offset:
          type: integer
          format: int64
        time-zone:
          type: string
        standard-text-catalog:
          type: array
          items:
            $ref: '#/components/schemas/StandardCatalog'
        standard-text-values:
          type: array
          items:
            $ref: '#/components/schemas/StandardTextTimeSeriesRow'
        regular-text-values:
          type: array
          items:
            $ref: '#/components/schemas/RegularTextTimeSeriesRow'
    BinaryTimeSeries:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        name:
          type: string
        interval-offset:
          type: integer
          format: int64
        time-zone:
          type: string
        binary-values:
          type: array
          items:
            $ref: '#/components/schemas/BinaryTimeSeriesRow'
    BinaryTimeSeriesRow:
      type: object
      properties:
        date-time:
          type: string
          format: date-time
        version-date:
          type: string
          format: date-time
        data-entry-date:
          type: string
          format: date-time
        binary-id:
          type: string
        attribute:
          type: integer
          format: int64
        media-type:
          type: string
        file-extension:
          type: string
        binary-value:
          type: array
          items:
            type: string
            format: byte
    TimeSeriesCategory:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
        description:
          type: string
      description: A representation of a TimeSeries category
      xml:
        name: timeseries-category
    TimeSeriesIdentifierDescriptor:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        time-series-id:
          type: string
        timezone-name:
          type: string
        interval-offset-minutes:
          type: integer
          format: int64
        active:
          type: boolean
    TimeSeriesIdentifierDescriptors:
      type: object
      properties:
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
        descriptors:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesIdentifierDescriptor'
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
    AssignedTimeSeries:
      type: object
      properties:
        officeId:
          type: string
        timeseriesId:
          type: string
        tsCode:
          type: number
        aliasId:
          type: string
        refTsId:
          type: string
        attribute:
          type: integer
          format: int32
    TimeSeriesGroup:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
        time-series-category:
          $ref: '#/components/schemas/TimeSeriesCategory'
        description:
          type: string
        shared-alias-id:
          type: string
        shared-ref-ts-id:
          type: string
        assigned-time-series:
          type: array
          items:
            $ref: '#/components/schemas/AssignedTimeSeries'
      description: A representation of a timeseries group
      xml:
        name: timeseries-group
    VersionType:
      type: string
      description: Version type specifies the type of timeseries response to be received. Can be max aggregate or single version. Max aggregate cannot be run if version date field is specified.
      enum:
        - MAX_AGGREGATE
        - SINGLE_VERSION
        - UNVERSIONED
        - UNDEF
    Offset:
      type: object
      properties:
        estimate:
          type: boolean
          xml:
            attribute: true
        toDatum:
          type: string
          xml:
            name: to-datum
        value:
          type: number
          format: double
    TimeSeries:
      required:
        - units
      type: object
      properties:
        begin:
          type: string
          description: The requested start time of the data, in ISO-8601 format with offset and timezone ('yyyy-MM-dd'T'HH:mm:ssZ'['VV']'')
          format: date-time
          readOnly: true
        date-version-type:
          type: string
          description: Version type specifies the type of timeseries response to be received. Can be max aggregate or single version. Max aggregate cannot be run if version date field is specified.
          enum:
            - MAX_AGGREGATE
            - SINGLE_VERSION
            - UNVERSIONED
            - UNDEF
        end:
          type: string
          description: The requested end time of the data, in ISO-8601 format with offset and timezone ('yyyy-MM-dd'T'HH:mm:ssZ'['VV']'')
          format: date-time
          readOnly: true
        interval:
          type: object
          properties:
            seconds:
              type: integer
              format: int64
            units:
              type: array
              items:
                type: object
                properties:
                  duration:
                    type: object
                    properties:
                      seconds:
                        type: integer
                        format: int64
                      nano:
                        type: integer
                        format: int32
                      zero:
                        type: boolean
                      negative:
                        type: boolean
                  dateBased:
                    type: boolean
                  durationEstimated:
                    type: boolean
                  timeBased:
                    type: boolean
            nano:
              type: integer
              format: int32
            zero:
              type: boolean
            negative:
              type: boolean
          description: The interval of the time-series, in ISO-8601 duration format
          format: Java Duration
          readOnly: true
        interval-offset:
          type: integer
          description: Offset from top of interval
          format: int64
          readOnly: true
        name:
          type: string
          description: Time-series name
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        office-id:
          type: string
          description: Office ID that owns the time-series
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
        time-zone:
          type: string
          description: Only on 21.1.1 Database. The timezone the Interval Offset is from.
          readOnly: true
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
        units:
          type: string
          description: The units of the time series data
        value-columns:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/TimeSeries.Column'
        values:
          type: array
          xml:
            wrapped: true
          items:
            type: array
            example:
              - 1509654000000
              - 54.3
              - 0
            items:
              type: object
              properties:
                date-time:
                  type: integer
                  description: Milliseconds since 1970-01-01 (Unix Epoch), always UTC
                  format: int64
                value:
                  type: number
                  description: Requested time-series data value
                  format: double
                quality-code:
                  type: integer
                  format: int32
              description: List of retrieved time-series values
        version-date:
          type: string
          description: The version date of the time series trace
          format: date-time
        vertical-datum-info:
          $ref: '#/components/schemas/VerticalDatumInfo'
      xml:
        name: timeseries
    TimeSeries.Column:
      type: object
      properties:
        name:
          type: string
        ordinal:
          type: integer
          format: int32
        datatype:
          type: string
      readOnly: true
    TimeSeries.Record:
      type: object
      properties:
        date-time:
          type: integer
          description: Milliseconds since 1970-01-01 (Unix Epoch), always UTC
          format: int64
        value:
          type: number
          description: Requested time-series data value
          format: double
        quality-code:
          type: integer
          format: int32
      description: List of retrieved time-series values
    VerticalDatumInfo:
      type: object
      properties:
        office:
          type: string
          xml:
            attribute: true
        unit:
          type: string
          xml:
            attribute: true
        location:
          type: string
        native-datum:
          type: string
        elevation:
          type: number
          format: double
        offsets:
          type: array
          xml:
            name: offset
          items:
            $ref: '#/components/schemas/Offset'
      xml:
        name: vertical-datum-info
    StoreRule:
      type: string
      enum:
        - REPLACE ALL
        - DO NOT REPLACE
        - REPLACE MISSING VALUES ONLY
        - REPLACE WITH NON MISSING
        - DELETE INSERT
    ParameterSpec:
      type: object
      properties:
        parameter:
          type: string
        in-range-method:
          type: string
        out-range-low-method:
          type: string
        out-range-high-method:
          type: string
    RatingTemplate:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
        version:
          type: string
        description:
          type: string
        dependent-parameter:
          type: string
        independent-parameter-specs:
          type: array
          items:
            $ref: '#/components/schemas/ParameterSpec'
        rating-ids:
          type: array
          items:
            type: string
    RatingTemplates:
      type: object
      properties:
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
        templates:
          type: array
          items:
            $ref: '#/components/schemas/RatingTemplate'
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
    IndependentRoundingSpec:
      type: object
      properties:
        position:
          type: integer
          format: int32
        value:
          type: string
    RatingSpec:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        rating-id:
          type: string
        template-id:
          type: string
        location-id:
          type: string
        version:
          type: string
        source-agency:
          type: string
        in-range-method:
          type: string
        out-range-low-method:
          type: string
        out-range-high-method:
          type: string
        active:
          type: boolean
        auto-update:
          type: boolean
        auto-activate:
          type: boolean
        auto-migrate-extension:
          type: boolean
        independent-rounding-specs:
          type: array
          items:
            $ref: '#/components/schemas/IndependentRoundingSpec'
        dependent-rounding-spec:
          type: string
        description:
          type: string
        effective-dates:
          type: array
          items:
            type: string
            format: date-time
    RatingSpecs:
      type: object
      properties:
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
        specs:
          type: array
          items:
            $ref: '#/components/schemas/RatingSpec'
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
    AbstractRatingMetadata:
      type: object
      properties:
        office-id:
          type: string
        rating-spec-id:
          type: string
        units-id:
          type: string
        active:
          type: boolean
        effective-date:
          type: string
          format: date-time
        create-date:
          type: string
          format: date-time
        transition-date:
          type: string
          format: date-time
        description:
          type: string
        vertical-datum-info:
          $ref: '#/components/schemas/VerticalDatumInfo'
        rating-type:
          type: string
      description: Rating Metadata
      discriminator:
        propertyName: rating-type
        mapping:
          table: '#/components/schemas/TableRating'
          transitional: '#/components/schemas/TransitionalRating'
          virtual: '#/components/schemas/VirtualRating'
          expression-rating: '#/components/schemas/ExpressionRating'
          usgs: '#/components/schemas/UsgsStreamRating'
      oneOf:
        - $ref: '#/components/schemas/TableRating'
        - $ref: '#/components/schemas/TransitionalRating'
        - $ref: '#/components/schemas/VirtualRating'
        - $ref: '#/components/schemas/ExpressionRating'
        - $ref: '#/components/schemas/UsgsStreamRating'
    ExpressionRating:
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractRatingMetadata'
        - type: object
          properties:
            expression:
              type: string
    RatingMetadata:
      type: object
      properties:
        rating-spec:
          $ref: '#/components/schemas/RatingSpec'
        ratings:
          type: array
          items:
            $ref: '#/components/schemas/AbstractRatingMetadata'
    RatingMetadataList:
      type: object
      properties:
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
        rating-metadata:
          type: array
          items:
            $ref: '#/components/schemas/RatingMetadata'
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
    SourceRating:
      type: object
    TableRating:
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractRatingMetadata'
        - type: object
          properties:
            in-range-method:
              type: string
            out-range-low-method:
              type: string
            out-range-high-method:
              type: string
    TransitionalRating:
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractRatingMetadata'
        - type: object
          properties:
            source-ratings:
              type: array
              items:
                type: string
            conditions:
              type: array
              items:
                type: string
            evaluations:
              type: array
              items:
                type: string
    UsgsStreamRating:
      type: object
      allOf:
        - $ref: '#/components/schemas/TableRating'
    VirtualRating:
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractRatingMetadata'
        - type: object
          properties:
            source-ratings:
              type: array
              items:
                $ref: '#/components/schemas/SourceRating'
            connections:
              type: string
    DatabaseLoadMethod:
      type: string
      enum:
        - EAGER
        - LAZY
        - REFERENCE
    CatalogableEndpoint:
      type: string
      description: Set of data for which a larger catalog can be built.
      enum:
        - TIMESERIES
        - LOCATIONS
    UnitSystem:
      type: string
      description: Unit System desired in response. Can be SI (International Scientific) or EN (Imperial.) If unspecified, defaults to SI.
      enum:
        - SI
        - EN
    Catalog:
      type: object
      properties:
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
        entries:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/CatalogEntry'
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
      xml:
        name: catalog
    CatalogEntry:
      type: object
      properties:
        office:
          type: string
          xml:
            attribute: true
      xml:
        name: entry
      oneOf:
        - $ref: '#/components/schemas/LocationCatalogEntry'
        - $ref: '#/components/schemas/TimeseriesCatalogEntry'
    LocationAlias:
      type: object
      properties:
        name:
          type: string
          xml:
            attribute: true
        value:
          type: string
      xml:
        name: alias
    LocationCatalogEntry:
      type: object
      properties:
        office:
          type: string
          xml:
            attribute: true
        name:
          type: string
        nearestCity:
          type: string
        publicName:
          type: string
        longName:
          type: string
        description:
          type: string
        kind:
          type: string
        type:
          type: string
        timeZone:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        publishedLatitude:
          type: number
          format: double
        publishedLongitude:
          type: number
          format: double
        horizontalDatum:
          type: string
        elevation:
          type: number
          format: double
        unit:
          type: string
        verticalDatum:
          type: string
        nation:
          type: string
        state:
          type: string
        county:
          type: string
        boundingOffice:
          type: string
        mapLabel:
          type: string
        active:
          type: boolean
        aliases:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/LocationAlias'
      xml:
        name: entry
    TimeSeriesExtents:
      type: object
      properties:
        earliest-time:
          type: string
          description: Earliest value in the timeseries
          format: date-time
        last-update:
          type: string
          description: Last update in the timeseries
          format: date-time
        latest-time:
          type: string
          description: Latest value in the timeseries
          format: date-time
        version-time:
          type: string
          description: TimeSeries version to which this extent information applies
          format: date-time
      description: TimeSeries extent information
      xml:
        name: extents
    TimeseriesCatalogEntry:
      type: object
      properties:
        office:
          type: string
          xml:
            attribute: true
        name:
          type: string
          xml:
            attribute: true
        units:
          type: string
        interval:
          type: string
        intervalOffset:
          type: integer
          description: Offset from top of interval
          format: int64
          xml:
            name: interval-offset
        timeZone:
          type: string
          description: Only on 21.1.1 Database. The timezone the Interval Offset is from.
          xml:
            name: time-zone
        extents:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/TimeSeriesExtents'
      xml:
        name: entry
    Basin:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        basin-name:
          type: string
        primary-stream:
          $ref: '#/components/schemas/Stream'
        sort-order:
          type: number
          format: double
        basin-area:
          type: number
          format: double
        contributing-area:
          type: number
          format: double
        parent-basin-id:
          type: string
    Stream:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        stream-name:
          type: string
        tributaries:
          type: array
          items:
            $ref: '#/components/schemas/Stream'
        stream-reaches:
          type: array
          items:
            $ref: '#/components/schemas/StreamReach'
        diverting-stream-id:
          type: string
        receiving-stream-id:
          type: string
        confluence-bank:
          type: string
        diversion-bank:
          type: string
        stream-length:
          type: number
          format: double
        confluence-station:
          type: number
          format: double
        diversion-station:
          type: number
          format: double
        stream-locations:
          type: array
          items:
            $ref: '#/components/schemas/StreamLocation'
        comment:
          type: string
        average-slope:
          type: number
          format: double
    StreamLocation:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        location-name:
          type: string
        stream-name:
          type: string
        station:
          type: number
          format: double
        bank:
          type: string
        published-station:
          type: number
          format: double
        lowest-measurable-stage:
          type: number
          format: double
        total-drainage-area:
          type: number
          format: double
        ungaged-drainage-area:
          type: number
          format: double
        nagivation-station:
          type: number
          format: double
    StreamReach:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        upstream-location-name:
          type: string
        downstream-location-name:
          type: string
        stream-name:
          type: string
        reach-name:
          type: string
        comment:
          type: string
        configuration:
          type: string
    Blob:
      required:
        - id
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
        description:
          type: string
        media-type-id:
          type: string
        value:
          type: array
          items:
            type: string
            format: byte
    Blobs:
      type: object
      properties:
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
        blobs:
          type: array
          description: List of retrieved blobs
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Blob'
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
      xml:
        name: blobs
    Clob:
      required:
        - id
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
        description:
          type: string
        value:
          type: string
      xml:
        name: clob
    Clobs:
      type: object
      properties:
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
        clobs:
          type: array
          description: List of retrieved clobs
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Clob'
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
      xml:
        name: clobs
    Pool:
      type: object
      properties:
        attribute:
          type: number
        description:
          type: string
        clobText:
          type: string
        implicit:
          type: boolean
        poolName:
          $ref: '#/components/schemas/PoolNameType'
        bottomLevelId:
          type: string
        projectId:
          type: string
        topLevelId:
          type: string
      description: List of retrieved pools
    PoolNameType:
      type: object
      properties:
        poolName:
          type: string
        officeId:
          type: string
    Pools:
      type: object
      properties:
        page:
          type: string
          description: The cursor to the current page of data
          readOnly: true
        total:
          type: integer
          description: The total number of records retrieved; null or not present if not supported or unknown
          format: int32
          readOnly: true
        pools:
          type: array
          description: List of retrieved pools
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Pool'
        next-page:
          type: string
          description: The cursor to the next page of data; null if there is no more data
          readOnly: true
        page-size:
          type: integer
          description: The number of records fetched per-page; this may be larger than the number of records actually retrieved
          format: int32
          readOnly: true
      xml:
        name: pools
    SpecifiedLevel:
      required:
        - office-id
      type: object
      properties:
        office-id:
          type: string
          description: Owning office of object.
        id:
          type: string
        description:
          type: string
  securitySchemes:
    CwmsAAACacAuth:
      type: apiKey
      description: Auth handler running on same tomcat instance as the data api.
      name: JSESSIONIDSSO
      in: cookie
    ApiKey:
      type: apiKey
      description: 'Key value as generated from the /auth/keys endpoint. NOTE: you MUST manually prefix your key with ''apikey '' (without the single quotes).'
      name: Authorization
      in: header
